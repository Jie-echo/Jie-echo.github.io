<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/09/05/%E6%97%A0%E7%95%8C%E5%BE%AE%E5%89%8D%E7%AB%AFminni%E7%89%88%E6%9C%AC%E5%AE%9E%E7%8E%B0/"/>
      <url>/2024/09/05/%E6%97%A0%E7%95%8C%E5%BE%AE%E5%89%8D%E7%AB%AFminni%E7%89%88%E6%9C%AC%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="无界微前端：如何简单实现-JavaScript-和-CSS-的隔离"><a href="#无界微前端：如何简单实现-JavaScript-和-CSS-的隔离" class="headerlink" title="无界微前端：如何简单实现 JavaScript 和 CSS 的隔离"></a>无界微前端：如何简单实现 JavaScript 和 CSS 的隔离</h1><p>面对将要接入三方网站的方案选型上，调研了目前已有微前端的框架，最终选择了无界；无界的思想也非常牛，接入无界后，需要对无界这个微前端框架也需要更加了解。本文主要介绍无界的源码剖析及mini-wujie实现。</p><h2 id="微前端"><a href="#微前端" class="headerlink" title="微前端"></a>微前端</h2><p>Techniques, strategies and recipes for building a <strong>modern web app</strong> with <strong>multiple teams</strong> that can <strong>ship features independently</strong>. – <a href="https://micro-frontends.org/">Micro Frontends</a></p><p>微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。</p><h3 id="微前端优势"><a href="#微前端优势" class="headerlink" title="微前端优势"></a>微前端优势</h3><p><a href="https://qiankun.umijs.org/zh/guide">qiankun介绍</a> → 微前端架构具备以下几个核心价值：</p><ul><li><p>技术栈无关</p><p>  主框架不限制接入应用的技术栈，微应用具备完全自主权</p></li><li><p>独立开发、独立部署</p><p>  微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新</p></li><li><p>增量升级</p><p>  在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略</p></li><li><p>独立运行时</p><p>  每个微应用之间状态隔离，运行时状态不共享</p></li></ul><p>微前端架构旨在解决单体应用在一个相对长的时间跨度下，由于参与的人员、团队的增多、变迁，从一个普通应用演变成一个巨石应用(<a href="https://www.youtube.com/watch?v=pU1gXA0rfwc">Frontend Monolith</a>)后，随之而来的应用不可维护的问题。这类问题在企业级 Web 应用中尤其常见。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>中台项目，集成已有其他网站功能，进行三方网站的集成。；</li><li>比如有一个巨大的应用，为了降低开发和维护成本，分拆成多个小应用进行开发和部署，然后用一个平台将这些小应用集成起来；</li><li>目前有两个技术栈不同的网站，现将两个网站进行一个整合；</li></ul><h3 id="微前端方案"><a href="#微前端方案" class="headerlink" title="微前端方案"></a>微前端方案</h3><p>现有微前端方案也出现了很多种，这里简单介绍一下已有微前端方案，对其优缺点可自行查询。</p><ol><li><a href="https://wujie-micro.github.io/doc/guide/#iframe-">iframe</a></li><li><a href="https://zhuanlan.zhihu.com/p/414468874">qiankun</a> → single-spa + <a href="https://link.zhihu.com/?target=https://www.npmjs.com/package/import-html-entry">import-html-entry</a></li><li><a href="https://juejin.cn/post/7143038795816910878">oppo擎天</a> → postMessage+iframe方案</li><li><a href="https://wujie-micro.github.io/doc/">无界</a> → WebComponent + iframe</li></ol><h2 id="无界微前端"><a href="#无界微前端" class="headerlink" title="无界微前端"></a>无界微前端</h2><p>需要接入微前端，主应用与子应用都需要进行改造，下面将介绍主子应用的一个改造指南。</p><p>无界特点：</p><ul><li>采用webConponent + iframe</li><li>JS隔离、CSS隔离</li><li>子应用保活</li><li>应用间通信</li></ul><h2 id="无界源码剖析"><a href="#无界源码剖析" class="headerlink" title="无界源码剖析"></a>无界源码剖析</h2><h3 id="无界原理可视化"><a href="#无界原理可视化" class="headerlink" title="无界原理可视化"></a>无界原理可视化</h3><p><a href="https://github.com/Tencent/wujie/blob/master/docs/guide/information.md">information.md</a>中有无界原理图及运行图。</p><p>运行时</p><p>实例化<a href="https://github.com/Tencent/wujie/blob/master/packages/wujie-core/src/index.ts#L260">WuJie</a>入口开始，主要做了以下事情：</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 创建沙箱const newSandbox &#x3D; new WuJie(&#123; name, url, attrs, degradeAttrs, fiber, degrade, plugins, lifecycles &#125;);newSandbox.lifecycles?.beforeLoad?.(newSandbox.iframe.contentWindow);&#x2F;&#x2F; html-entryconst &#123; template, getExternalScripts, getExternalStyleSheets &#125; &#x3D; await importHTML(&#123;  url,  html,  opts: &#123;    fetch: fetch || window.fetch,    plugins: newSandbox.plugins,    loadError: newSandbox.lifecycles.loadError,    fiber,  &#125;,&#125;);&#x2F;&#x2F; 处理cssloader、性能优化 -&gt; 将外部css链接 转为 内联样式const processedHtml &#x3D; await processCssLoader(newSandbox, template, getExternalStyleSheets);&#x2F;&#x2F; 同步路由、准备shadowRoot，将template（含内联样式）渲染到shadowRoot上await newSandbox.active(&#123; url, sync, prefix, template: processedHtml, el, props, alive, fetch, replace &#125;);&#x2F;&#x2F; iframe插入js 并运行 insertScriptToIframeawait newSandbox.start(getExternalScripts);return newSandbox.destroy;</code></pre><h3 id="无界思想实现"><a href="#无界思想实现" class="headerlink" title="无界思想实现"></a>无界思想实现</h3><p><img src="/image.png" alt="image.png"></p><p>如上图可见，上述主要做了以下事情</p><ol><li>需要一个容器</li><li>解析url， 解析成html、css、js</li><li>将html模版和css放置在shadowRoot中 → 这样实现了css隔离</li><li>创建了iframe容器用于存放js代码，js执行代理到shadowRoot中</li><li>路由同步 &#x3D;&gt; iframe自身就有自己的路由系统，这里需要将iframe的url同步到window上的url</li></ol><h3 id="实现效果图："><a href="#实现效果图：" class="headerlink" title="实现效果图："></a>实现效果图：</h3><h3 id="样式隔离："><a href="#样式隔离：" class="headerlink" title="样式隔离："></a>样式隔离：</h3><p><img src="/image%201.png" alt="image.png"></p><h3 id="js隔离："><a href="#js隔离：" class="headerlink" title="js隔离："></a>js隔离：</h3><p><img src="/image%202.png" alt="image.png"></p><h3 id="document代理"><a href="#document代理" class="headerlink" title="document代理"></a>document代理</h3><p><img src="/image%203.png" alt="image.png"></p><h3 id="mini-wujie实现"><a href="#mini-wujie实现" class="headerlink" title="mini-wujie实现"></a>mini-wujie实现</h3><p>根据以下步骤进行实现，其方面命名均采用wujie源码方法，更容易理解。</p><ol><li>创建沙箱</li><li>创建shadowDOM</li><li>将html、css放入shadowDOM</li><li>沙箱执行js (proxy document等)</li></ol><p>实现：<br>地址: -&gt; </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>内嵌社媒信息</title>
      <link href="/2024/04/14/%E5%86%85%E5%B5%8C%E7%A4%BE%E5%AA%92%E8%B0%83%E7%A0%94/"/>
      <url>/2024/04/14/%E5%86%85%E5%B5%8C%E7%A4%BE%E5%AA%92%E8%B0%83%E7%A0%94/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="内嵌社媒方案"><a href="#内嵌社媒方案" class="headerlink" title="内嵌社媒方案"></a>内嵌社媒方案</h1><h3 id="方案一：采用各个社区提供的sdk进行渲染"><a href="#方案一：采用各个社区提供的sdk进行渲染" class="headerlink" title="方案一：采用各个社区提供的sdk进行渲染"></a>方案一：采用各个社区提供的sdk进行渲染</h3><p>对于内嵌 YouTube、TikTok、Facebook 和 Instagram 等社交媒体内容，通常需要使用它们各自的 SDK 或 API 来获取媒体内容，并在网页中进行展示。</p><ol><li><a href="https://developers.google.com/youtube/iframe_api_reference?hl=zh-cn">YouTube</a></li><li><a href="https://developers.tiktok.com/doc/embed-videos/">TikTok</a></li><li><a href="https://developers.facebook.com/docs/plugins/embedded-posts">Facebook</a></li><li><a href="https://developers.facebook.com/docs/plugins/embedded-posts">instagram</a></li></ol><p>Demo实现</p><p>YouTube、TikTok、Facebook、Instagram案例简单Demo实现</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;    &lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;    &lt;title&gt;Embedded Social Media Content&lt;&#x2F;title&gt;    &lt;&#x2F;head&gt;    &lt;body&gt;    &lt;ul&gt;        &lt;li&gt;        &lt;div&gt;            &lt;div&gt;youtube 案例&lt;&#x2F;div&gt;            &lt;div id&#x3D;&quot;youtube-player&quot;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;&#x2F;li&gt;        &lt;li&gt;        &lt;div&gt;            &lt;div&gt;tiktok 案例&lt;&#x2F;div&gt;            &lt;blockquote            class&#x3D;&quot;tiktok-embed&quot;            cite&#x3D;&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;@zachking&#x2F;video&#x2F;6749520869598481669&quot;            data-video-id&#x3D;&quot;6749520869598481669&quot;            data-embed-from&#x3D;&quot;oembed&quot;            style&#x3D;&quot;max-width: 605px; min-width: 325px&quot;            &gt;            &lt;section&gt;                &lt;a target&#x3D;&quot;_blank&quot; title&#x3D;&quot;@zachking&quot; href&#x3D;&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;@zachking?refer&#x3D;embed&quot;&gt;@zachking&lt;&#x2F;a&gt;                &lt;p&gt;                Do you see the glass as half full or half empty??                &lt;a title&#x3D;&quot;perspective&quot; target&#x3D;&quot;_blank&quot; href&#x3D;&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;tag&#x2F;perspective?refer&#x3D;embed&quot;                    &gt;#perspective&lt;&#x2F;a                &gt;                &lt;a title&#x3D;&quot;magic&quot; target&#x3D;&quot;_blank&quot; href&#x3D;&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;tag&#x2F;magic?refer&#x3D;embed&quot;&gt;#magic&lt;&#x2F;a&gt;                &lt;&#x2F;p&gt;                &lt;a                target&#x3D;&quot;_blank&quot;                title&#x3D;&quot;♬ Glass Half Full Zach King - Zach King&quot;                href&#x3D;&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;music&#x2F;Glass-Half-Full-Zach-King-6749517306881248005?refer&#x3D;embed&quot;                &gt;♬ Glass Half Full Zach King - Zach King&lt;&#x2F;a                &gt;            &lt;&#x2F;section&gt;            &lt;&#x2F;blockquote&gt;        &lt;&#x2F;div&gt;        &lt;&#x2F;li&gt;        &lt;li&gt;        &lt;div&gt;facebook 案例&lt;&#x2F;div&gt;        &lt;!-- 内容不一样 类名不一样 例如帖子使用post； 相册使用album等 --&gt;        &lt;div class&#x3D;&quot;fb-post&quot; data-href&#x3D;&quot;https:&#x2F;&#x2F;www.facebook.com&#x2F;facebook&#x2F;posts&#x2F;575327262637013&quot;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;li&gt;        &lt;li&gt;        &lt;div&gt;instagram 案例&lt;&#x2F;div&gt;        &lt;blockquote class&#x3D;&quot;instagram-media&quot; data-instgrm-permalink&#x3D;&quot;https:&#x2F;&#x2F;www.instagram.com&#x2F;p&#x2F;C5aS3CbrsYe&#x2F;&quot;&gt;&lt;&#x2F;blockquote&gt;        &lt;&#x2F;li&gt;    &lt;&#x2F;ul&gt;    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;iframe_api&quot;&gt;&lt;&#x2F;script&gt;    &lt;script&gt;        function onYouTubeIframeAPIReady() &#123;        const player &#x3D; new YT.Player(&#39;youtube-player&#39;, &#123;            height: &#39;360&#39;,            width: &#39;640&#39;,            videoId: &#39;rGmoljGmKPI&#39;,        &#125;);        &#125;    &lt;&#x2F;script&gt;    &lt;script async src&#x3D;&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;embed.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script async defer crossorigin&#x3D;&quot;anonymous&quot; src&#x3D;&quot;https:&#x2F;&#x2F;connect.facebook.net&#x2F;en_US&#x2F;sdk.js#xfbml&#x3D;1&amp;version&#x3D;v19.0&quot;&gt;&lt;&#x2F;script&gt;    &lt;script async src&#x3D;&quot;https:&#x2F;&#x2F;www.instagram.com&#x2F;static&#x2F;bundles&#x2F;metro&#x2F;EmbedSDK.js&#x2F;33cd2c5d5d59.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/730e3a098fce4f3a99f44760de65e61d~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2000&h=1709&s=1812786&e=png&b=fbf8f8" alt="image.png"></p><p>高效</p><ul><li>解决列表需要渲染多种相同类型的社媒内容 → 封装sdk，sdk层去处理创建实例</li><li>部分社媒内容和绑定的类名不一样导致，如何简易化 → 中间层处理不同类型社媒，渲染参数</li></ul><p>针对上述问题，查询业界是否有提供的具体方案。</p><p>tiktok： react-tiktok-embed</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">import React from &#39;react&#39;;import TikTokEmbed from &#39;react-tiktok-embed&#39;;function MyComponent() &#123;    return (    &lt;div&gt;        &lt;TikTokEmbed url&#x3D;&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;@username&#x2F;video&#x2F;1234567890&quot; &#x2F;&gt;    &lt;&#x2F;div&gt;    );&#125;export default MyComponent;</code></pre><p>youtube: react-youtube</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">import React from &#39;react&#39;;import YouTube from &#39;react-youtube&#39;;function MyComponent() &#123;    const videoId &#x3D; &#39;VIDEO_ID_HERE&#39;; &#x2F;&#x2F; 替换为你的 YouTube 视频 ID    return (    &lt;div&gt;        &lt;YouTube videoId&#x3D;&#123;videoId&#125; &#x2F;&gt;    &lt;&#x2F;div&gt;    );&#125;export default MyComponent;</code></pre><p>facebook和instagram没有专门的react社区库</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p><code>react-social-media-embed</code> </p><p>在 React 中轻松嵌入来自多个流行社交媒体平台的内容。</p><p> 所有嵌入只需要帖子的 URL。不需要 API 令牌。 </p><p>目前支持：Facebook、Instagram、LinkedIn、Pinterest、TikTok、X (Twitter) 和 YouTube。</p><p><a href="https://github.com/justinmahar/react-social-media-embed?tab=readme-ov-file">GitHub - justinmahar&#x2F;react-social-media-embed: 📰 Easily embed social media posts from Facebook, Instagram, LinkedIn, Pinterest, TikTok, X (Twitter), and YouTube in React.</a></p><p><a href="https://www.npmjs.com/package/react-social-media-embed">npm: react-social-media-embed</a></p><p>具体展示案例：</p><p><a href="https://justinmahar.github.io/react-social-media-embed/?path=/story/embeds-facebookembed--main-example">@storybook&#x2F;cli - Storybook</a></p><p><strong>稳定性：</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c313b29bdba4446a957f5ef869d82449~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2000&h=2202&s=436471&e=png&b=fefefe" alt="image.png"></p><p>Demo效果</p><p>vite + react + <del>ts简易实现</del><br>步骤</p><ol><li>npm install -g vite  </li><li>npm install -g create-vite  </li><li>npm init @vitejs&#x2F;app my-react-app –template react-ts </li><li><code>npm i react-social-media-embed</code></li><li>引入案例</li></ol><pre class="language-jsx" data-language="jsx"><code class="language-jsx">import &#123; FacebookEmbed, InstagramEmbed, TikTokEmbed, YouTubeEmbed &#125; from &#39;react-social-media-embed&#39;;&lt;div style&#x3D;&#123;&#123; display: &#39;flex&#39;, justifyContent: &#39;center&#39; &#125;&#125;&gt;    &lt;YouTubeEmbed url&#x3D;&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;HpVOs5imUN0&quot; width&#x3D;&#123;325&#125; height&#x3D;&#123;220&#125; &#x2F;&gt;&lt;&#x2F;div&gt;&lt;div style&#x3D;&#123;&#123; display: &#39;flex&#39;, justifyContent: &#39;center&#39; &#125;&#125;&gt;    &lt;FacebookEmbed url&#x3D;&quot;https:&#x2F;&#x2F;www.facebook.com&#x2F;andrewismusic&#x2F;posts&#x2F;451971596293956&quot; width&#x3D;&#123;328&#125; &#x2F;&gt;&lt;&#x2F;div&gt;&lt;div style&#x3D;&#123;&#123; display: &#39;flex&#39;, justifyContent: &#39;center&#39; &#125;&#125;&gt;    &lt;InstagramEmbed url&#x3D;&quot;https:&#x2F;&#x2F;www.instagram.com&#x2F;p&#x2F;C5aS3CbrsYe&#x2F;&quot; width&#x3D;&#123;328&#125; &#x2F;&gt;&lt;&#x2F;div&gt;&lt;div style&#x3D;&#123;&#123; display: &#39;flex&#39;, justifyContent: &#39;center&#39; &#125;&#125;&gt;    &lt;TikTokEmbed url&#x3D;&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;@epicgardening&#x2F;video&#x2F;7055411162212633903&quot; width&#x3D;&#123;325&#125; &#x2F;&gt;&lt;&#x2F;div&gt;</code></pre><p>内嵌功能交互体现</p><p>内嵌社媒内容，官方提供的案例中带有播放、点赞、评论等交互功能性按钮，开发前我们需要了解其功能具体体现是什么？主要有下面两点：</p><ol><li>视频、音频能否正常播放（内嵌功能 → 快进、分享、全屏等是否正常使用）</li><li>点赞、评论、分享、点击头像进入主页等功能是否正常对接使用</li></ol><p>根据上述问题可进入到<a href="https://justinmahar.github.io/react-social-media-embed/?path=/story/embeds-facebookembed--main-example">体验地址</a>进行查看交互效果…</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>tiktok视频案例<a href="https://www.tiktok.com/embed/6904271117783928065">https://www.tiktok.com/embed/6904271117783928065</a></li><li><a href="https://help.agencyanalytics.com/en/articles/4596217-embed-content-on-dashboards-and-web-reports-via-our-embed-widgets">https://help.agencyanalytics.com/en/articles/4596217-embed-content-on-dashboards-and-web-reports-via-our-embed-widgets</a> 内嵌案例合集</li><li>facebook测试号 <a href="https://www.regexpal.com/94994">https://www.regexpal.com/94994</a></li></ol><p><a href="https://iframely.com/domains/tiktok">Embed TikTok: Responsive oEmbed via Iframely</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 其它 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>whistle快速入门</title>
      <link href="/2024/04/10/whistle%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2024/04/10/whistle%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="whistle快速入门"><a href="#whistle快速入门" class="headerlink" title="whistle快速入门"></a>whistle快速入门</h1><h2 id="什么是whistle"><a href="#什么是whistle" class="headerlink" title="什么是whistle"></a>什么是whistle</h2><p>whistle不是口哨，而是基于Node实现的跨平台抓包调试工具，它是一个开源免费的跨平台软件。</p><p><a href="https://github.com/avwo/whistle/tree/master">GitHub - avwo&#x2F;whistle: HTTP, HTTP2, HTTPS, Websocket debugging proxy</a></p><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><h3 id="一：安装whistle"><a href="#一：安装whistle" class="headerlink" title="一：安装whistle"></a>一：安装whistle</h3><p>Windows使用<code>npm i -g whistle &amp;&amp; w2 start --init</code> 一键安装</p><p>whistle文档介绍建议安装<strong>最新的 LTS 版本</strong>安装</p><p>node不兼容，安装失败问题</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/838e734f7bed4bdf8ac77a25380d1b84~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2000&h=860&s=637713&e=png&b=0c0c0c" alt="image.png"></p><p>使用nvm查看一下node版本：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83706bfdb7384e7ca29e793cb9755c6b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2000&h=322&s=128718&e=png&b=0d0d0d" alt="image.png"></p><p>切换为node14.17.5可以下载</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f07b89e30fb04f4ab5e4d4576ab23feb~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2000&h=765&s=457056&e=png&b=0d0d0d" alt="image.png"></p><h3 id="二：启动whistle"><a href="#二：启动whistle" class="headerlink" title="二：启动whistle"></a>二：启动whistle</h3><p>常用whistle的命令：</p><ul><li>w2 start 启动</li><li>w2 restart 重启</li><li>w2 stop 停止</li><li>w2 start -p port 指定代理端口</li></ul><p>启动whistle</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7dbcafef2e5744279b5fd97265699fe6~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2000&h=490&s=338179&e=png&b=0c0c0c" alt="image.png"></p><p>通过上面的链接可以进去管理whistle的主界面</p><p>127.0.0.1:8899</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e87f78363724cd9a95fee9bf1380ff3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2000&h=570&s=161591&e=png&b=002240" alt="image.png"></p><h3 id="三：使用SwitchyOmega-设置代理"><a href="#三：使用SwitchyOmega-设置代理" class="headerlink" title="三：使用SwitchyOmega 设置代理"></a>三：使用SwitchyOmega 设置代理</h3><p><strong>安装 SwitchyOmega</strong></p><p>打开 Chrome 扩展商店进行安装 <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif</a></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a46a4550ba5d469eab8053623aef152e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2000&h=931&s=222062&e=png&b=fefefe" alt="image.png"></p><p>将浏览器请求 → net 变为 浏览器请求 → switchyOmega劫持配置 → whistle → net</p><p>关于线上错误排查，由于线上是https请求，所以看不到请求具体内容，可以通过安装证书即可查看详细的请求内容。</p><p>证书下载：浏览器输入rootca.pro</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React源码解读</title>
      <link href="/2023/04/06/React%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
      <url>/2023/04/06/React%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<p>本片用于记录阅读《React设计原理》的架构篇读书笔记。持续完成更新…..</p><p>阅读React设计原理，解读Reconciler三个工作阶段：render、commot、schedule</p><h2 id="render阶段"><a href="#render阶段" class="headerlink" title="render阶段"></a>render阶段</h2><blockquote><p>render阶段可能开始于performSyncWorkOnRoot（同步更新流程）或performConcurrentWorkRoot（并发更新阶段）</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">workLoopSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">workLoopConcurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">shouldYieId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>同步更新流程和并发更新流程方法唯一区别是调用”shouldYieId ⇒ 是否可中断“</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span><span class="token parameter">filberNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//省略执行beginWork工作</span><span class="token keyword">if</span><span class="token punctuation">(</span>fiberNode<span class="token punctuation">.</span>child<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>fiberNode<span class="token punctuation">.</span>child<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//省略执行completeWork工作</span><span class="token keyword">if</span><span class="token punctuation">(</span>fiberNode<span class="token punctuation">.</span>sibling<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>fiberNode<span class="token punctuation">.</span>sibling<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>beginWork工作流程</p><p>判断当前流程属于mount还是update流程，根据wip.tag进入不同类型元素的处理分支，使用reconcile算法生成下一级fiberNode</p><p>较比update阶段可复用fiber节点时，会给生成的fiberNode带上副作用flags。</p><p>flags标记：</p><ul><li>ChildDeletion，代表删除操作</li><li>Placement，代表插入或移动操作</li></ul><p>completeWork工作流程</p><ol><li>创建或者标记元素更新</li><li>flags冒泡</li></ol><p>完成工作流程1（更新的标记）之后，更新中的增删改操作均已完成，Reconciler中的解析flags。 </p><p>Reconciler工作流程采用DFS的顺序构建WipFiberTree。整个过程分为“递”和“归”两个阶段，分别对应beginWork和completeWork。</p><p>最终HostRootFiber完成completeWork时，Reconciler的工作流程结束。此时我们可以得到：</p><ul><li>代表本次更新的Wip Fiber Tree</li><li>被标记的flags</li></ul><hr><h1 id="commit阶段"><a href="#commit阶段" class="headerlink" title="commit阶段"></a>commit阶段</h1><p>在commit阶段会将各种副作用（flags表示）commit（提交）到宿主环境UI中。</p><blockquote><p>render阶段流程可能被打断，而commit阶段一旦开始就会同步执行完成。</p></blockquote><p>整个阶段分为以下三个子阶段</p><ul><li>BeforeMutation阶段 DOM操作前</li><li>Mutation阶段 操作DOM元素的增删改 </li><li>Layout阶段 执行DOM操作后</li></ul><p>BeforeMutation阶段主要与Update、Snapshot两个flags相关。<br>Mutation阶段包含的flags大多是完成”Ui相关副作用“。</p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端图片优化方案</title>
      <link href="/2023/04/02/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/"/>
      <url>/2023/04/02/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h1><h2 id="项目中图片的忧优化方案"><a href="#项目中图片的忧优化方案" class="headerlink" title="项目中图片的忧优化方案"></a>项目中图片的忧优化方案</h2><ol><li>使用CDN</li><li>图片懒加载</li><li>图片的动态剪裁</li><li>骨架屏</li></ol><h2 id="CDN（内容分发网络）"><a href="#CDN（内容分发网络）" class="headerlink" title="CDN（内容分发网络）"></a>CDN（内容分发网络）</h2><p><strong>什么是CDN</strong></p><p>CDN是指内容分发网络（Content Delivery Network），是一种用于提高网站性能和可用性的网络架构。它通过在全球各地的服务器上缓存网站的静态和动态内容，使用户能够更快速地访问网站并获得更好的用户体验。</p><p><strong>CDN的作用</strong></p><p>CDN通过将内容缓存在分布式的服务器上，使得用户可以从最近的服务器获取内容，从而减少了加载时间和延迟。它还可以通过负载均衡和自动故障转移，提高网站的可用性和稳定性。</p><p>使用CDN缓存，可以提高图片的加载速度和用户体验</p><p>主要体现在以下方面：降低服务器压力、降低成本、提高图片访问速度</p><h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><p>实现原理都可以使用IntersectionObserver的API实现</p><p>图片懒加载、无限滚动 → <a href="https://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html">阮一峰IntersectionObserver API 使用教程</a></p><p><strong>什么是…、作用是…</strong></p><p>图片懒加载是当图片进入视口区域才进行加载，这样可以节省带宽，提高网页性能。</p><p><strong>如何实现</strong></p><p>IntersectionObserverFunc组件</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">import &#123; useEffect, useRef, useState &#125; from &#39;react&#39;import styles from &#39;.&#x2F;index.less&#39;interface PropsType &#123;  src: string&#125;const IntersectionObserverFuc &#x3D; (props: PropsType)&#x3D;&gt;&#123;  const &#123;src&#125; &#x3D; props;  const imgRef &#x3D; useRef(null)  const [imgSrc, setImgSrc] &#x3D; useState(src)  useEffect(() &#x3D;&gt; &#123;    const intersectionObserver &#x3D; new IntersectionObserver(function(entries) &#123;      entries.forEach( function(element: any, index) &#123;        &#x2F;&#x2F; debugger          if (element.isIntersecting) &#123;            setImgSrc(src)&#x2F;&#x2F;停止观察            intersectionObserver.disconnect()          &#125; else&#123;            let img &#x3D; &#39;&#39;; &#x2F;&#x2F;可以使用默认图片            setImgSrc(img)          &#125;      &#125;);    &#125;);    intersectionObserver.observe(imgRef?.current);    return () &#x3D;&gt; &#123;      if(imgRef.current) &#123;&#x2F;&#x2F;关闭观察器        intersectionObserver.unobserve(imgRef.current)      &#125;    &#125;;  &#125;, [])  return &lt;img src&#x3D;&#123;imgSrc&#125; alt&#x3D;&quot;&quot;  ref&#x3D;&#123;imgRef&#125; className&#x3D;&#123;styles.img&#125;&#x2F;&gt;&#125;export default IntersectionObserverFuc&#x2F;&#x2F;使用let imgSrc &#x3D; &#39;https:&#x2F;&#x2F;img0.baidu.com&#x2F;it&#x2F;u&#x3D;2054720471,487433032&amp;fm&#x3D;253&amp;fmt&#x3D;auto&amp;app&#x3D;138&amp;f&#x3D;JPEG?w&#x3D;800&amp;h&#x3D;500&#39;;&#123;  Array(100).fill(imgSrc)?.map((item, index) &#x3D;&gt; &#123;    return(      &lt;IntersectionObserverFuc src&#x3D;&#123;item&#125; key&#x3D;&#123;index&#125;&#x2F;&gt;    )  &#125;)&#125;</code></pre><h2 id="图片的动态剪裁"><a href="#图片的动态剪裁" class="headerlink" title="图片的动态剪裁"></a>图片的动态剪裁</h2><p><strong>什么是…、作用是…</strong></p><p>图片的动态剪裁是一种图片处理的技术，可以根据实际需要动态地剪裁图片的大小和比例，以适应不同的显示设备和尺寸。图片的动态剪裁通常是通过调用服务器端的图片处理的API实现的。</p><p>通常可以配置：图片地址、剪裁位置、缩放模式、加水印、滤镜等效果</p><p>作用：提升图片的加载速度和用户体验。</p><p><strong>举例</strong></p><p>图片的动态剪裁：阿里云和七牛云都支持参数，比如:</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">&#x2F;&#x2F;没剪裁的https:&#x2F;&#x2F;img.alicdn.com&#x2F;imgextra&#x2F;i4&#x2F;379092709&#x2F;O1CN01adpXJe1VslgpbprWS_!!379092709.jpg&#x2F;&#x2F;剪裁后的https:&#x2F;&#x2F;img.alicdn.com&#x2F;imgextra&#x2F;i4&#x2F;379092709&#x2F;O1CN01adpXJe1VslgpbprWS_!!379092709.jpg_310x310</code></pre><h2 id="骨架屏、菊花图（loading）"><a href="#骨架屏、菊花图（loading）" class="headerlink" title="骨架屏、菊花图（loading）"></a>骨架屏、菊花图（loading）</h2><p>使用骨架屏和菊花图可以防止应用程序白屏太久，提高用户体验。</p><p>骨架屏可以使用UI图配合IntersectionObserverFunc来使用，</p>]]></content>
      
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios的cancelToken封装</title>
      <link href="/2023/03/28/cancelToken/"/>
      <url>/2023/03/28/cancelToken/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="cancelToken"><a href="#cancelToken" class="headerlink" title="cancelToken"></a>cancelToken</h1><h2 id="cancelToken简介"><a href="#cancelToken简介" class="headerlink" title="cancelToken简介"></a>cancelToken简介</h2><p>cancelToken是axios用来取请求的api</p><p>针对菜单的路由页面跳转，我们可以取消请求跳转前的请求，以提升页面性能减少不必要的等待。</p><h2 id="AbortController简介"><a href="#AbortController简介" class="headerlink" title="AbortController简介"></a>AbortController简介</h2><p>在<a href="https://juejin.cn/post/7134326391977279501">axios</a>中，新增AbortController，将<strong>CancelToken</strong>标记为**<code>deprecated</code>** </p><ul><li><p>MDN中介绍<strong>AbortController</strong></p><p>  <strong><code>AbortController</code></strong> 接口表示一个控制器对象，允许你根据需要中止一个或多个 Web 请求。</p><p>  你可以使用 <code>[AbortController.AbortController()](https://developer.mozilla.org/zh-CN/docs/Web/API/AbortController/AbortController)</code> 构造函数创建一个新的 <code>AbortController</code>。使用 <code>[AbortSignal](https://developer.mozilla.org/zh-CN/docs/Web/API/AbortSignal)</code> 对象可以完成与 DOM 请求的通信。</p></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cfca1a869762411c9982268c285142ed~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="实现axios的CancelToken"><a href="#实现axios的CancelToken" class="headerlink" title="实现axios的CancelToken"></a>实现axios的CancelToken</h2><p>api.js</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">import axios from &quot;axios&quot;;const CancelToken &#x3D; axios.CancelToken;const sourceList &#x3D; []const opt &#x3D; &#123;  &#x2F;&#x2F;拓展默认属性  &#x2F;&#x2F;baseURL、cache、contentType、timeout等  timeout: 80000, &#x2F;&#x2F;统一设置超时时间&#125;let instance &#x3D; axios.create(opt);function handleCancelToken(CancelToken, sourceList) &#123;  if(!CancelToken)&#123;    return  &#125;   return &#123;    source: function source() &#123;      const source &#x3D; CancelToken.source();      sourceList.push(source)      return &#123;        token: source?.token,        cancel: function cancel(message)&#123;          if(source?.canceled)&#123;            return;          &#125;          const index &#x3D; sourceList?.findIndex(function (s) &#123;            return s &#x3D;&#x3D;&#x3D; source          &#125;)          index !&#x3D;&#x3D; -1 &amp;&amp; source?.splice(index, 1)          source?.cancel(message)        &#125;      &#125;    &#125;  &#125;&#125;instance.interceptors.request.use(config &#x3D;&gt; &#123;  &#x2F;&#x2F;模拟封装配置项目&#x2F;&#x2F;针对每一个请求添加一个CancelToken，在handleCancelToken内部记录请求的source  const defaultParams &#x3D; Object.assign(config, &#123;    cancelToken: handleCancelToken(CancelToken, sourceList)?.source()?.token  &#125;)  console.log(defaultParams, &#39;config&#39;)  return defaultParams&#125;, err &#x3D;&gt; &#123;  console.log(err, &#39;请求错误&#39;)&#125;)instance.interceptors.response.use(res &#x3D;&gt; &#123;  console.log(res, &#39;响应结果&#39;)  return res&#125;, err &#x3D;&gt; &#123;  &#x2F;&#x2F;TODO：错误码处理、Canceloken错误处理  console.log(err, &#39;响应错误&#39;)  if(err?.message &#x3D;&#x3D;&#x3D; &#39;&quot;myCanceledError&quot;&#39;)&#123;    return  &#125;&#125;)&#x2F;&#x2F;手动取消请求 -&gt; 路由切换后取消请求instance.abortAll &#x3D; function(message)&#123;  &#x2F;&#x2F;**注意：第一个请求没有被取消**  sourceList?.forEach( source &#x3D;&gt; &#123;    source.canceled &#x3D; true    source.cancel(message)  &#125;)  sourceList.length &#x3D; 0&#125;export default instance;</code></pre><p>测试文件：test.tsx</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">import api from &#39;.&#x2F;api&#39;export default function Index() &#123;  const send &#x3D; () &#x3D;&gt; &#123;    &#x2F;&#x2F;let controller &#x3D; new AbortController();    &#x2F;&#x2F;const signal &#x3D; controller.signal;    api(&#123;      url: &#39;https:&#x2F;&#x2F;mdn.github.io&#x2F;dom-examples&#x2F;abort-api&#x2F;sintel.mp4&#39;,      method: &#39;get&#39;,      params: &#123;        &#x2F;&#x2F;signal: signal      &#125;   &#125;)  &#125;  const cancel&#x3D; () &#x3D;&gt; &#123;    &#x2F;&#x2F;取消请求    api?.abortAll(&#39;myCanceledError&#39;)  &#125;  return (    &lt;div&gt;      &lt;button onClick&#x3D;&#123;send&#125;&gt;        点击请求      &lt;&#x2F;button&gt;      &lt;button onClick&#x3D;&#123;cancel&#125;&gt;        取消请求      &lt;&#x2F;button&gt;    &lt;&#x2F;div&gt;  )&#125;</code></pre><p>Prompt → ‘react-router-dom’</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">const promptCallback &#x3D; () &#x3D;&gt; &#123;&#x2F;&#x2F;todoapi?.abortAll(&#39;myCanceledError&#39;)&#125;&lt;Prompt when&#x3D;&#123;true&#125; message&#x3D;&#123;promptCallback&#125; &#x2F;&gt;</code></pre><h2 id="AbortController同理"><a href="#AbortController同理" class="headerlink" title="AbortController同理"></a>AbortController同理</h2><p>controller &#x3D; new AbortController();</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS数据结构</title>
      <link href="/2023/03/08/JS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/03/08/JS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>数据结构的重要性。掌握常见的数据结构，可以利用一些数据结构去解决一些业务中的数据。</p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="栈-stack"><a href="#栈-stack" class="headerlink" title="栈(stack)"></a>栈(stack)</h2><p>栈结构是一种受限的线性表。<code>后进先出（LIFO：last in first out）</code>。</p><p>栈常见的操作</p><ul><li>push：添加元素到栈顶  → 入栈</li><li>pop：移除栈顶元素，同时返回被移除的元素  → 出栈</li><li>peek：返回栈顶元素</li><li>isEmpty：栈里是否有元素</li><li>size：返回栈元素个数</li><li>toString：栈结构以字符形式返回</li></ul><p>实现一个栈结构，用栈结构来封装 十进制转二进制函数</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">function Stack()&#123;this.arr &#x3D; [];Stack.prototype.push &#x3D; function (ele) &#123;return this.arr.push(ele)&#125;Stack.prototype.pop &#x3D; function ()&#123;return this.arr.pop()&#125;Stack.prototype.peek &#x3D; function () &#123;return this.arr?.[this.arr.length - 1]&#125;Stack.prototype.isEmpty &#x3D; function () &#123;return this.arr?.length &#x3D;&#x3D;&#x3D; 0&#125;Stack.prototype.toString &#x3D; function () &#123;return this.arr.splice(&#39;,&#39;).join(&#39; &#39;)&#125;&#125;const s &#x3D; new Stack()</code></pre><h3 id="有效括号"><a href="#有效括号" class="headerlink" title="有效括号"></a>有效括号</h3><p>思路：</p><ol><li>采用栈结构，入栈出栈</li><li>使用map映射<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">'&#123;'</span><span class="token operator">:</span> <span class="token string">'&#125;'</span><span class="token punctuation">,</span>    <span class="token string-property property">'['</span><span class="token operator">:</span> <span class="token string">']'</span><span class="token punctuation">,</span>    <span class="token string-property property">'('</span><span class="token operator">:</span> <span class="token string">')'</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">'&#123;'</span> <span class="token operator">||</span> value <span class="token operator">===</span> <span class="token string">'['</span> <span class="token operator">||</span> value <span class="token operator">===</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token keyword">let</span> right <span class="token operator">=</span> map<span class="token punctuation">[</span>left<span class="token punctuation">]</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">!==</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> stack<span class="token operator">?.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token string">"()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token string">"()[]&#123;&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token string">"(]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token string">"([)]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token string">"&#123;[]&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// true</span></code></pre></li></ol><h2 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列(Queue)"></a>队列(Queue)</h2><p>队列结构也是一种受限的线性结构。先进先出（FIFO: first in first out）</p><p>队列常见的操作</p><ul><li>enqueue：向队列尾部添加一个元素    → 入队</li><li>dequeue：移除队列的第一项，并返回被移除的元素 → 出队</li><li>front：返回队列中第一个元素</li><li>isEmpty：队列是否为空</li><li>size：返回队列长度</li><li>toString：将队列中的内容，转换为字符串</li></ul><p>实现队列 - &gt; 使用队列封装击鼓传花的方法</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">function Queue()&#123;this.arr &#x3D; []Queue.prototype.enqueue &#x3D; function (ele) &#123;&#x2F;&#x2F;TODO&#125;&#125;const queue &#x3D; new Queue()function passGame(nameList, num) &#123;&#125;</code></pre><p><strong>优先级队列</strong></p><p>数组实现</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">function PriorityQueue() &#123;&#x2F;&#x2F;优先级队列元素 包含内容及优先级系数 -&gt; 创建内部类function QueueElement(ele, zindex) &#123;this.ele &#x3D; ele;this.zindex &#x3D; zindex;&#125;this.arr &#x3D; [];&#x2F;&#x2F;插入PriorityQueue.prototype.enqueue &#x3D; function (element, index) &#123;&#x2F;&#x2F;创建队列元素对象const queueElement &#x3D; new QueueElement(element, index);&#x2F;&#x2F;1.队列为空直接入队&#x2F;&#x2F;2.根据优先级然后插入&#x2F;&#x2F;TODO&#125;&#125;</code></pre><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表优点：</p><ul><li>内存空间不是必须连续的，可以充分利用计算机的内存，实现灵活的内存动态管理.</li><li>链表不必在创建时就确认大小，并且大小可以无限的延伸下去.</li><li>链表在插入和删除数据，时间复杂度可以达到O(1).</li><li>无法通过下标直接访问，需要从头一个个访问。</li></ul><p><strong>单向链表</strong>：链表相连的过程中时单向的。</p><p>链表的常见操作</p><ul><li>append：向列表位置添加一个元素</li><li>insert：向列表的特定位置插入一个新的项</li><li>get：获取对应位置的元素</li><li>indexOf：返回元素在列表的索引。</li><li>update：修改某个位置的元素</li><li>removeAt: 从列表的特定位置移除一项</li><li>remove: 从列表中移除一项</li><li>isEmpty：是否为空</li><li>size：返回链表包含元素个数</li><li>toString：输出元素值</li></ul><p>封装链表</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">function LinkedList() &#123;function Node(data)&#123;this.data &#x3D; data;this.next &#x3D; null&#125;this.head &#x3D; null;this.length &#x3D; 0;LinkedList.prototype.append &#x3D; function (data)&#123;const newNode &#x3D; new Node(data)&#x2F;&#x2F;1.有节点 2.无节点if(this.length &#x3D;&#x3D;&#x3D; 0)&#123;this.head &#x3D; newNode&#125;else &#123;let current &#x3D; this.head;while(current.next)&#123;current &#x3D; current.next&#125;current.next &#x3D; newNode&#125;this,length +&#x3D; 1&#125;LinkedList.prototype.insert &#x3D; function (position, data)&#123;&#x2F;&#x2F;1.边界判断&#125;&#125;</code></pre><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p><img src="/%E9%93%BE%E8%A1%A8%2074e1b4f3b487429ab96eee441f8a2bf2/Untitled.png" alt="Untitled"></p><ul><li>head：头指针</li><li>tail：尾指针</li><li>prev：指向上一个节点</li><li>next：指向下一个节点</li></ul><p>封装双向链表</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">function DoulyLinkedList()&#123;&#125;</code></pre><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p><img src="/%E6%A0%91%20c53844d94f6d409e8c531a7e49d761c3/Untitled.png" alt="Untitled"></p><p>二叉树：树中每个节点最多只能有两个子节点。</p><p>二叉树的特性</p><ul><li>一个二叉树第 i 层的最大节点数为： 2^(i - 1), i ≥ 1;</li><li>深度为K的二叉树有最大节点总数为：2^k - 1, k ≥ 1;</li><li>对任何非空二叉树T，若n0表示叶节点的哥数、n2是度为2的非叶子节点合格数，那么两者满足关系n0 &#x3D; n2 + 1</li></ul><p>完全二叉树：除叶子节点都是满的</p><p>树的遍历方式</p><p>先序遍历</p><p><img src="/%E6%A0%91%20c53844d94f6d409e8c531a7e49d761c3/Untitled%201.png" alt="Untitled"></p><ol><li>访问根节点</li><li>先序遍历其左子树</li><li>先序遍历其右子树</li></ol><p>中序遍历</p><p><img src="/%E6%A0%91%20c53844d94f6d409e8c531a7e49d761c3/Untitled%202.png" alt="Untitled"></p><ol><li>中序遍历其左子树</li><li>访问根节点</li><li>中序遍历其右子树</li></ol><p>后序遍历</p><p><img src="/%E6%A0%91%20c53844d94f6d409e8c531a7e49d761c3/Untitled%203.png" alt="Untitled"></p><ol><li>后序遍历其左子树</li><li>后序遍历其右子树</li><li>访问根节点</li></ol><p>二叉搜索树</p><p>常见方法：</p><ul><li>insert：向树中插入一个新的键</li><li>search：查找一个键</li><li>inOrderTraverse：通过中序遍历方式遍历所有节点</li><li>preOrderTraverse：通过先序遍历方式遍历所有节点</li><li>postOrderTraverse：通过后序遍历方式遍历所有节点</li><li>min：返回树中最小值</li><li>max：返回树中最大值</li><li>remove：删除某个键</li></ul><p>封装二叉搜素树</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">function BinarySerachTree() &#123;function Node(key) &#123;&#125;this.root &#x3D; null&#125;</code></pre><p>对于一颗平衡二叉树来说，插入、查找等操作的效率是O(logN)</p><p>对于一颗非平衡二叉树，相当于编写了一个链表，查找效率是O(N)</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS手写方法合集</title>
      <link href="/2023/02/07/JS%E6%89%8B%E5%86%99%E6%96%B9%E6%B3%95%E5%90%88%E9%9B%86/"/>
      <url>/2023/02/07/JS%E6%89%8B%E5%86%99%E6%96%B9%E6%B3%95%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="JS手写方法合集"><a href="#JS手写方法合集" class="headerlink" title="JS手写方法合集"></a>JS手写方法合集</h1><p>2023年面试准备的手写方法合集。</p><h2 id="排序相关"><a href="#排序相关" class="headerlink" title="排序相关"></a>排序相关</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token operator">?.</span>length    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token string">'arr'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></code></pre><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token operator">?.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> minIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> temp    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                minIndex <span class="token operator">=</span> j            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">selectSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h3 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span>  <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token keyword">let</span> midIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>nums<span class="token operator">?.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> midValue <span class="token operator">=</span> nums<span class="token operator">?.</span><span class="token function">splice</span><span class="token punctuation">(</span>midIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> leftArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rightArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        item <span class="token operator">&lt;</span> midValue <span class="token operator">?</span> leftArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">:</span> rightArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>leftArr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>midValue<span class="token punctuation">,</span><span class="token function">quickSort</span><span class="token punctuation">(</span>rightArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="有效括号"><a href="#有效括号" class="headerlink" title="有效括号"></a>有效括号</h3><p>实现原理： 栈结构、map映射</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">'&#123;'</span><span class="token operator">:</span> <span class="token string">'&#125;'</span><span class="token punctuation">,</span>        <span class="token string-property property">'['</span><span class="token operator">:</span> <span class="token string">']'</span><span class="token punctuation">,</span>        <span class="token string-property property">'('</span><span class="token operator">:</span> <span class="token string">')'</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">'&#123;'</span> <span class="token operator">||</span> value <span class="token operator">===</span> <span class="token string">'['</span> <span class="token operator">||</span> value <span class="token operator">===</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>          <span class="token keyword">let</span> right <span class="token operator">=</span> map<span class="token punctuation">[</span>left<span class="token punctuation">]</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">!==</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> stack<span class="token operator">?.</span>length <span class="token operator">===</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token string">"()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// true</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token string">"()[]&#123;&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token string">"(]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// false</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token string">"([)]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// false</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token string">"&#123;[]&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// true</span></code></pre><h3 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">LRUCache</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">capacity</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">LRUCache</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>        <span class="token keyword">return</span> value    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">LRUCache</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">put</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span>size <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//空间满了</span>            <span class="token keyword">const</span> firstKey <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value            <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>firstKey<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> lurCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LRUCache</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>lurCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>lurCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>lurCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>lurCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>lurCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>lurCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>lurCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>lurCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>lurCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></code></pre><h2 id="promise-all"><a href="#promise-all" class="headerlink" title="promise.all"></a>promise.all</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">promiseAll</span> <span class="token punctuation">(</span><span class="token parameter">values</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//参数必须为数组</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">'type error'</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> resultArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//返回结果</span>        <span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//记录索引</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> values<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> value <span class="token operator">=</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> value<span class="token operator">?.</span>then <span class="token operator">==</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//执行.then.catch</span>                value<span class="token operator">?.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token function">processPromise</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>reject<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">//直接拿结果</span>                <span class="token function">processPromise</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> i<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                 <span class="token keyword">function</span> <span class="token function">processPromise</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            resultArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>idx <span class="token operator">===</span> values<span class="token operator">?.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>resultArr<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">promiseAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//输出 [1, 2, 3]</span></code></pre><h2 id="Primise-race"><a href="#Primise-race" class="headerlink" title="Primise.race"></a>Primise.race</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">promiseRace</span><span class="token punctuation">(</span><span class="token parameter">values</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error type'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> data <span class="token keyword">of</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> data<span class="token operator">?.</span>then <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        data<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">promiseRace</span><span class="token punctuation">(</span><span class="token punctuation">[</span>     <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">promiseRace</span><span class="token punctuation">(</span><span class="token parameter">values</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error type'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>    values<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">promiseRace</span><span class="token punctuation">(</span><span class="token punctuation">[</span>     <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">wrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h2 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h2><p>new关键字实现原理</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">_new</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 创建对象</span>    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 改变this指向</span>    obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> fn<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">//原型指向原型对象</span><span class="token punctuation">&#125;</span></code></pre><h2 id="once函数实现"><a href="#once函数实现" class="headerlink" title="once函数实现"></a>once函数实现</h2><p>once函数为vue里面的<code>once</code>函数-&gt;函数只执行一次<br>实现原理：通过<code>闭包</code>的方式存储状态</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">once</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            state <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> onceFn <span class="token operator">=</span> <span class="token function">once</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第一次'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">onceFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">onceFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">onceFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">stringReverse</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="数组随机排序"><a href="#数组随机排序" class="headerlink" title="数组随机排序"></a>数组随机排序</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">arrayRandomSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">arrayRandomSort</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="统计字符串中出现次数最多的字符及次数"><a href="#统计字符串中出现次数最多的字符及次数" class="headerlink" title="统计字符串中出现次数最多的字符及次数"></a>统计字符串中出现次数最多的字符及次数</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getFrequentChar</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> maxArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> maxArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            maxArr <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> maxArr<span class="token punctuation">&#125;</span><span class="token function">getFrequentChar</span><span class="token punctuation">(</span><span class="token string">"aaabbaaacc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="数组交集"><a href="#数组交集" class="headerlink" title="数组交集"></a>数组交集</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">intersection</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">intersection</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="数组并集"><a href="#数组并集" class="headerlink" title="数组并集"></a>数组并集</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>            timer <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><h3 id="1-节流时间戳方式实现"><a href="#1-节流时间戳方式实现" class="headerlink" title="1 节流时间戳方式实现"></a>1 节流时间戳方式实现</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> pre <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">let</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> pre <span class="token operator">>=</span> delay<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>            pre <span class="token operator">=</span> now<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-节流定时器方式实现"><a href="#2-节流定时器方式实现" class="headerlink" title="2 节流定时器方式实现"></a>2 节流定时器方式实现</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> statue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>statue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        statue <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>            statue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack工作流程</title>
      <link href="/2023/02/03/webpack%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <url>/2023/02/03/webpack%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="webpack工作流程"><a href="#webpack工作流程" class="headerlink" title="webpack工作流程"></a>webpack工作流程</h2><blockquote><p>webpack构建的核心是完成内容的转换和资源的合并。</p></blockquote><p>分初始化阶段、构建阶段、生成阶段来讲解webpack工作流程。</p><h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><ol><li>初始化参数</li></ol><p>将命令行参数和用户配置文件进行合并，使用schema-utils库的getValidateSchema方法进行参数校验</p><ol start="2"><li>创建编译对象、实例化配置信息</li></ol><p>webpack支持多个配置对象，比如一个library有多个构建目标，就需要传入多个配置对象，每个配置对象都要执行。<br><code>compiler对象包含了webpack环境所有的配置信息，比如options、loaders、plugins</code>。</p><h4 id="createCompiler"><a href="#createCompiler" class="headerlink" title="createCompiler"></a>createCompiler</h4><p><a href="https://github.com/webpack/webpack/blob/main/lib/webpack.js">源码</a>123行</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    compiler <span class="token operator">=</span> createMultiCompiler<span class="token punctuation">&#123;</span>options<span class="token punctuation">&#125;</span>    <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    compiler <span class="token operator">=</span> <span class="token function">createCompiler</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>    <span class="token operator">...</span><span class="token punctuation">&#125;</span></code></pre><p><a href="https://github.com/webpack/webpack/blob/main/lib/webpack.js#L61">创建compiler</a></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">createCompiler</span> <span class="token operator">=</span> <span class="token parameter">rawOptions</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token function">getNormalizedWebpackOptions</span><span class="token punctuation">(</span>rawOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">applyWebpackOptionsBaseDefaults</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Compiler</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>context<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">NodeEnvironmentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">infrastructureLogging</span><span class="token operator">:</span> options<span class="token punctuation">.</span>infrastructureLogging    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>plugins<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> options<span class="token punctuation">.</span>plugins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token function">plugin</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            <span class="token function">plugin</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">applyWebpackOptionsDefaults</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">afterEnvironment</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">WebpackOptionsApply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> compiler<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>接下来针对createCompiler创建流程细化</p><h4 id="NodeEnvironmentPlugin"><a href="#NodeEnvironmentPlugin" class="headerlink" title="NodeEnvironmentPlugin"></a>NodeEnvironmentPlugin</h4><p>实例化NodeEnvironmentPlugin</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//65行</span><span class="token keyword">new</span> <span class="token class-name">NodeEnvironmentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">infrastructureLogging</span><span class="token operator">:</span> options<span class="token punctuation">.</span>infrastructureLogging<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>NodeEnvironmentPlugin</code>可以对文件输入、输出、缓存、监听。<a href="https://github.com/webpack/webpack/blob/main/lib/node/NodeEnvironmentPlugin.js">源码</a></p><p>附含<a href="https://webpack.docschina.org/api/compiler-hooks/">compiler hook</a> </p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">NodeEnvironmentPlugin</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token operator">...</span>        <span class="token comment">//文件输入</span>        compiler<span class="token punctuation">.</span>inputFileSystem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachedInputFileSystem</span><span class="token punctuation">(</span>fs<span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//文件输出</span>        compiler<span class="token punctuation">.</span>outputFilesSystem <span class="token operator">=</span> fs<span class="token punctuation">;</span> <span class="token comment">//const fs = require("graceful-fs");</span>        <span class="token comment">//文件缓存</span>        compiler<span class="token punctuation">.</span>intermdiateFileSystem <span class="token operator">=</span> fs<span class="token punctuation">;</span>        <span class="token comment">//文件监听</span>        compiler<span class="token punctuation">.</span>watchFileSystem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeMatchFileSystem</span><span class="token punctuation">&#123;</span> compiler<span class="token punctuation">.</span>inputFileSystem <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//项目配置插件提供了`inputFileSystem`对象就使用项目提供的</span>        compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>beforeRun<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">"NodeEnvironmentPlugin"</span><span class="token punctuation">,</span> <span class="token parameter">compiler</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>compiler<span class="token punctuation">.</span>inputFileSystem <span class="token operator">===</span> inputFileSystem<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                compiler<span class="token punctuation">.</span>fsStartTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                inputFileSystem<span class="token punctuation">.</span><span class="token function">purge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="解构options-plugins（注册plugins）"><a href="#解构options-plugins（注册plugins）" class="headerlink" title="解构options.plugins（注册plugins）"></a>解构options.plugins（注册plugins）</h4><p>判断plugins属性是否为数组，是数组然后解构为一个一个的plugin,<a href="https://github.com/webpack/webpack/blob/main/lib/webpack.js#L68">直达</a></p><p>遍历arguments对象，arguments成员-&gt;插件实例调用自身的apply方法执行注册流程。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>plugins<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> options<span class="token punctuation">.</span>plugins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">plugin</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">plugin</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">applyWebpackOptionsDefaults</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="compiler-options的重新赋值"><a href="#compiler-options的重新赋值" class="headerlink" title="compiler.options的重新赋值"></a>compiler.options的重新赋值</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript">compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">afterEnvironment</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">WebpackOptionsApply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> compiler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<a href="https://github.com/webpack/webpack/blob/main/lib/WebpackOptionsApply.js">WebpackOptionsApply</a>类里面提供一个process方法。process(options, compiler) { }。而它主要做了以下几件事情</p><ol><li>将传入的options上的属性赋值给compiler对于对象</li><li>根据options配置是否需要注册一些内部自带的插件和resolverFactory.hooks</li><li>解析entry<code>new EntryOptionPlugin().apply(compiler);compiler.hooks.entryOption.call(options.context, options.entry);</code></li><li>返回options</li></ol><p>resolverFactory.hooks主要包含<code>normal</code>、<code>context</code>、<code>loader</code></p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript">compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="构建阶段"><a href="#构建阶段" class="headerlink" title="构建阶段"></a>构建阶段</h3><p>构建阶段主要有以下几个流程：</p><ol><li>开始编译</li><li>确认编译入口（读取entires配置，递归遍历所有入口文件）</li><li>编译模块（从entry文件开始，调用loader对模块进行转译，通过<code>acorn</code>转换为AST）</li><li>完成模块编译</li></ol><h4 id="compiler-run"><a href="#compiler-run" class="headerlink" title="compiler.run"></a>compiler.run</h4><p><a href="https://github.com/webpack/webpack/blob/4b4ca3bb53f36a5b8fc6bc1bd976ed7af161bd80/lib/Compiler.js#L514">Compiler.run()</a></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>beforeRun<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">finalCallback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>run<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">finalCallback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readRecords</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">finalCallback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>onCompiled<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="compiler-compile"><a href="#compiler-compile" class="headerlink" title="compiler.compile"></a>compiler.compile</h4><p><a href="https://github.com/webpack/webpack/blob/4b4ca3bb53f36a5b8fc6bc1bd976ed7af161bd80/lib/Compiler.js#L1159">Compiler.compile(callback)</a></p><p>在compile方法依次执行了以下几个hook</p><ol><li>beforeCompile</li><li>compile</li><li>make</li><li>finishMake</li><li>afterCompile</li></ol><p>在complie阶段通过<code>const compilation = this.newCompilation(params);</code>实例化了Compilation，对于compilation对象表现了当前的模块资源、编译生成的资源、变化的文件以及被跟踪依赖的状态信息，代表一次资源的构建。</p><h3 id="生成阶段"><a href="#生成阶段" class="headerlink" title="生成阶段"></a>生成阶段</h3><p>输出资源、写入文件系统</p><h3 id="关于Loader、Plugin"><a href="#关于Loader、Plugin" class="headerlink" title="关于Loader、Plugin"></a>关于Loader、Plugin</h3><p>Loader 是对一个个的文件进行处理，它是一个转换器，将A文件进行编译成B文件。</p><p>Plugin 是贯穿在整个构建生命周期，可以对不同阶段的构建产物进行处理。</p><h4 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h4><p>webpack的loader本质是一个<code>ESM</code>模块，它导出一个<code>函数</code>，这个函数就是对打包资源进行转换然后输出结果。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//source 资源文件内容</span>    <span class="token comment">//TODO 处理过程</span>    <span class="token keyword">return</span> <span class="token string">'加工后的输出'</span><span class="token punctuation">&#125;</span>loader<span class="token punctuation">.</span><span class="token function-variable function">pitch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//pitch loader</span>    <span class="token comment">//TODO</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> loader<span class="token punctuation">;</span></code></pre><h4 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h4><p>plugin是导出一个<code>class</code>，其中类包含了一个固定的方法名为<code>apply</code>,apply方法的第一个参数为<code>compiler</code>,我们可以通过拿到<code>compiler</code>对象的hooks进行添加事件.</p><blockquote><p><a href="https://github.com/webpack/tapable">Tapable</a>: 一个工具库，其中包含了很多hook。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">EchoPlugin</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//options</span>    <span class="token punctuation">&#125;</span>        <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//tap: 同步/异步；topAsync：异步</span>        <span class="token comment">//可以在compiler任意生命周期内进行操作，举例emit的钩子</span>        compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>emit<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">'EchoPlugin'</span><span class="token punctuation">,</span> <span class="token parameter">compilation</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">//TODO</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="总体流程图"><a href="#总体流程图" class="headerlink" title="总体流程图"></a>总体流程图</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f647deaf7f34bdbafae0b9198574a7f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>推荐链接<a href="https://febook.hzfe.org/awesome-interview/book1/engineer-webpack-workflow#31-%E7%94%9F%E6%88%90%E4%BA%A7%E7%89%A9">剑指前端Offer</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> webpacck </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几分钟了解js模块化、IIFE</title>
      <link href="/2023/02/01/%E5%87%A0%E5%88%86%E9%92%9F%E4%BA%86%E8%A7%A3js%E6%A8%A1%E5%9D%97%E5%8C%96%E3%80%81IIFE/"/>
      <url>/2023/02/01/%E5%87%A0%E5%88%86%E9%92%9F%E4%BA%86%E8%A7%A3js%E6%A8%A1%E5%9D%97%E5%8C%96%E3%80%81IIFE/</url>
      
        <content type="html"><![CDATA[<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><p>目前规定的四种模块化规范：CommonJS、AMD、CMD、ES6 Modules import<br>分为下面四点：</p><ol><li>CommonJS</li><li>AMD</li><li>CMD</li><li>ES6 Modules</li></ol><h2 id="一：-CommonJS"><a href="#一：-CommonJS" class="headerlink" title="一： CommonJS:"></a>一： CommonJS:</h2><p>node模块中采用的就是CommonJS模块规范,<br>暴露模块的方法: module.exports &#x3D; xxx,<br>引入模块的方法: require(xxx)  &#x2F;&#x2F;三方模块为：模块名； 自定义模块为： 路径名<br>特点: 加载模块是同步的: 加载完成,继续执行流程,</p><h2 id="二：-AMD"><a href="#二：-AMD" class="headerlink" title="二： AMD:"></a>二： AMD:</h2><p>暴露模块的方法:<br>define(function(){<br>    return 模块<br>})<br>若暴露出的模块有依赖模块则:<br>define([], function(){<br>    &#x2F;&#x2F;数组中填写依赖模块名<br>    &#x2F;&#x2F;可以在function中带参数给依赖模块取别名<br>    return 模块<br>})<br>引入模块的方法:<br>require([], function(模块名,[…]){</p><p>})</p><h2 id="三-CMD"><a href="#三-CMD" class="headerlink" title="三: CMD:"></a>三: CMD:</h2><p>CMD是专门用于浏览器端. 异步加载. CommonJS与AMD的结合<br><a href="https://juejin.cn/post/6844903744518389768#heading-40">若需详细了解可以查看:</a></p><h2 id="四：-es6-Modules"><a href="#四：-es6-Modules" class="headerlink" title="四： es6 Modules"></a>四： es6 Modules</h2><p>默认暴露模块: export default () &#x3D;&gt; {<br>        xxx<br>}<br>选择性暴露模块 export xxx<br>举例:<br>    export function foo() {<br>            console.log(‘哈哈哈，我导出了一个方法哦！’)<br>    }<br>引入模块的方法:<br>    import { foo } from ‘文件名{文件名可以是路径 可以是库名}’<br>    &#x2F;&#x2F;可以按需引入 模块中的暴露出来的方法、值、对象</p><h2 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h2><p>IIFE：立即执行函数  </p><h3 id="立即执行函数的几种写法："><a href="#立即执行函数的几种写法：" class="headerlink" title="立即执行函数的几种写法："></a>立即执行函数的几种写法：</h3><p>第一种：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是第一个立即执行函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>第二种：（规范推荐写法）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是第二个立即执行函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>第三种： </p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是第三个立即执行函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>第四种：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是第四个立即执行函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>总结：<br>第一种常见、已分辨该函数为立即执行函数；第二种为规范式写法；第三种到第四种为 当函数作为表达式运行时，可以在不需要写为()()。 () js自动解析为表达式。以此，立即执行函数的函数表达式的写法有多种。</p><blockquote><p>对于带参数的立即执行函数. 举例一个加法函数</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token comment">// 3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><h2 id="全局上下文-GO-、函数上下文知识-AO"><a href="#全局上下文-GO-、函数上下文知识-AO" class="headerlink" title="全局上下文(GO)、函数上下文知识(AO)"></a>全局上下文(GO)、函数上下文知识(AO)</h2><p>下面一题答案： </p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这里是函数知识'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>答案见评论区</p><h2 id="知识小店1"><a href="#知识小店1" class="headerlink" title="知识小店1"></a>知识小店1</h2><p>display: -webkit-box;<br>-webkit-line-clamp: 3;<br>-webkit-box-orient: vertical;<br>overflow: hidden;<br>text-overflow: ellipsis;<br>&#x2F;&#x2F;实现三行文字，省略号显示</p><p>&#x2F;&#x2F;在react中</p><ol><li>使用&#x2F;* autoprefixer: ignore next *&#x2F; 对-webkit-box-orient: vertical;进行过滤</li><li>直接使用行内元素<br>overflow: hidden;<br>text-overflow: ellipsis;<br>display: -webkit-box;<br>-webkit-line-clamp: 3;<br>&#x2F;* autoprefixer: ignore next *&#x2F;<br>-webkit-box-orient: vertical;</li></ol><h2 id="知识小店2"><a href="#知识小店2" class="headerlink" title="知识小店2"></a>知识小店2</h2><p>?. &#x2F;&#x2F;在对于后端返回的数据进行判断<br>const obj &#x3D; {<br>info: {<br>        name: ‘echo’,<br>        age: 6<br>    }<br>}<br>const obj2 &#x3D; {<br>info: null<br>}<br>console.log(obj.info?.name) &#x2F;&#x2F;“echo”<br>console.log(obj2.info?.name) &#x2F;&#x2F;undefined<br>console.log(obj.info.name) &#x2F;&#x2F;Error: Cannot read property ‘name’ of null</p><blockquote><p>若不使用?. 判断则为： obj.info ? obj.info.name : null</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript实现封装、继承、多态</title>
      <link href="/2023/01/06/JavaScript%E5%AE%9E%E7%8E%B0%E5%B0%81%E8%A3%85%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E7%BB%A7%E6%89%BF/"/>
      <url>/2023/01/06/JavaScript%E5%AE%9E%E7%8E%B0%E5%B0%81%E8%A3%85%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="JavaScript实现封装、继承、多态"><a href="#JavaScript实现封装、继承、多态" class="headerlink" title="JavaScript实现封装、继承、多态"></a>JavaScript实现封装、继承、多态</h2><h2 id="前景提要："><a href="#前景提要：" class="headerlink" title="前景提要："></a>前景提要：</h2><p>曾在面试过程中遇到请讲述React的class和hooks的区别。</p><p>答： function是面向过程编程，class是面向对象编程（也是基于面向过程的面向对象编程）</p><p>举个 🌰 ：</p><p>面向过程： 我需要找一个女盆友：我需要做什么事呢？ 之前dy流行的背景音乐—始换发型、改变穿衣风格（ins风、oversize…）、自律（自驱动学习、撸铁）、早睡。整个是一个过程依次执行。</p><p>面向对象：比如进入一个交友社区，上面发布了有以下交友单 ⬇</p><p>一： 1. 性别♂、 2. 胖胖的、 3.高高的</p><p>二： 1. 身材好的、 2. 程序员、 3. 帅帅的</p><p>嗯，这个就给予了我自己进行选择：它内部已经给我把清单列出来，我按需执行就完事了。</p><p>我选择第二个，那么就根据上面的要求依次执行—&gt; 首先拥有健康的身体、学会敲代码、…</p><p>面向对象编程也可以称为基于面向过程的。从 🌰 上看，面向对象也离不开面向过程。</p><h2 id="ES5构造函数-和-ES6类的区别"><a href="#ES5构造函数-和-ES6类的区别" class="headerlink" title="ES5构造函数 和 ES6类的区别"></a>ES5构造函数 和 ES6类的区别</h2><h3 id="ES5-构造函数"><a href="#ES5-构造函数" class="headerlink" title="ES5 构造函数"></a>ES5 构造函数</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> height</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">doing</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i am coding!'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">info</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello, i am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, i am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> year old .</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> echo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'echo'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span>echo<span class="token punctuation">.</span><span class="token function">doing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//i am coding!</span>echo<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//hello, i am echo, i am 6 year old .</span>xiaoming<span class="token punctuation">.</span><span class="token function">doing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//i am coding!</span>xiaoming<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//hello, i am 小明, i am 1 year old .</span></code></pre><h3 id="ES6-Class"><a href="#ES6-Class" class="headerlink" title="ES6 Class"></a>ES6 Class</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> ; age: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'狗'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'猫'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//name: 狗 ; age: 2</span>cat<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//name: 猫 ; age: 1</span></code></pre><p>根据上面的对比：可以看出用构造函数和class都能实现相同的效果</p><blockquote><p>小结</p></blockquote><ol><li>类的声明没有提升、和函数是不同的</li><li>同一个类不能被重复定义（’Identifier ‘XXX’ has already been declared’），而函数则是下面的会覆盖上一个函数</li><li>类也可以看作构造函数的一个语法糖</li></ol><h2 id="面向对象的思想-封装、继承、多态"><a href="#面向对象的思想-封装、继承、多态" class="headerlink" title="面向对象的思想. 封装、继承、多态"></a>面向对象的思想. 封装、继承、多态</h2><h3 id="封装：-通过封装，控制类的属性与方法的可访问信息"><a href="#封装：-通过封装，控制类的属性与方法的可访问信息" class="headerlink" title="封装： 通过封装，控制类的属性与方法的可访问信息"></a>封装： 通过封装，控制类的属性与方法的可访问信息</h3><p>关键字：<code>private</code>、<code>public</code>、<code>protected</code></p><p>封装的三个好处： 程序低耦合、能够对类的内部结构进行设置可访问&#x2F;不可访问、能够对内部成员进行限制{三个关键字}</p><blockquote><p>ES6 目前没有支持封装特性<br>对于typescript一个JavaScript的超集就更接近面向对象编程的思想也拥有<code>private</code>、<code>public</code>、<code>protected</code>等关键字进行对其内部成员进行配置。对于面向对象语言来说得先申明好数据的数据类型。</p></blockquote><p>后期再回顾typescript知识并记录学习的知识要点。</p><p>扯远了~ 回归正题： js中如何实现封装—让成员变量私有化： 使用<code>Symbol</code>类型（ES6新数据类型）：独一无二的值。</p><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Symbol">Symbol()</a> <code>symbol</code>类型的值，该类型具有<code>静态属性</code>和<code>静态方法</code>。它的静态属性会暴露几个内建的成员对象；它的静态方法会暴露全局的symbol注册</p><p>下面就写一个Symbol实现类属性私有化的 🌰</p><h4 id="Symbol实现封装"><a href="#Symbol实现封装" class="headerlink" title="Symbol实现封装"></a>Symbol实现封装</h4><p>首先创建一个classes.js文件</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">const</span> hobby <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'hobby'</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">[</span>hobby<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'撸铁'</span><span class="token punctuation">&#125;</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> ; age: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我是classes.js文件，我现在访问自己的私有属性hobby：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">[</span>hobby<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>再创建一个subClass.js文件</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> Animal <span class="token keyword">from</span> <span class="token string">'./classes.js'</span><span class="token keyword">export</span> <span class="token keyword">default</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'狗'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    dog<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dog<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我是subClass.js文件，我正在访问Classes.js的私有属性hobby：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>dog<span class="token punctuation">[</span><span class="token string">'hobby'</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            哈哈哈        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9397820088db45c39ad4103a7c29d32c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>在es5中，用构造函数call、apply改变this指向或者使用原型链继承js实现继承的方式多种，就举栗这两种吧。</p><h4 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> height</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">doing</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i am coding!'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">info</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello, i am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, i am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> year old .</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">MoreInformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ooo <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token class-name">MoreInformation</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bobby</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i like Swimming'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//Person.prototype = MoreInformation.prototype //->也可</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoreInformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sleeping</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i am sleeping'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoreInfomation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> echo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'echo'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>echo<span class="token punctuation">.</span><span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//i am sleeping</span>echo<span class="token punctuation">.</span><span class="token function">bobby</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//i like Swimming</span></code></pre><h4 id="2-call、apply-借用方法、属性"><a href="#2-call、apply-借用方法、属性" class="headerlink" title="2. call、apply 借用方法、属性"></a>2. call、apply 借用方法、属性</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> height</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">doing</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i am coding!'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">info</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello, i am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, i am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> year old .</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'echoBoy'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">155</span><span class="token punctuation">)</span>    <span class="token comment">// Person.apply(this, ['echoBoy', 2, 155])</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> echo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'echo'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token keyword">var</span> echoBoy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// hello, i am echoBoy, i am 2 year old .</span></code></pre><h4 id="3-ES6类继承"><a href="#3-ES6类继承" class="headerlink" title="3. ES6类继承"></a>3. ES6类继承</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> ; age: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ChildAnimal</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color    <span class="token punctuation">&#125;</span>    <span class="token function">infomation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> ; age: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> ; color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'狗'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'猫'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//name: 狗 ; age: 2</span>cat<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//name: 猫 ; age: 1</span><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChildAnimal</span><span class="token punctuation">(</span><span class="token string">'哈哈'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">)</span>foo<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//name: 哈哈 ; age: 6</span>foo<span class="token punctuation">.</span><span class="token function">infomation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//name: 哈哈 ; age: 6 ; color: yellow</span></code></pre><p>从代码运行结果看出 ChildAnimal类继承了父类Animal。可以调用父类的方法和使用其父类的属性。<br><code>super</code>关键字：<code>super</code>关键字用于访问和调用一个对象的父对象上的函数。</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态： 成员方法的重载和重写</p><hr><p> 在封装部分讲解到访问对象属性采用  <code>this[hobby] = &#39;撸铁&#39;</code></p><p> 详细讲一波： 举🌰</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'echo'</span><span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>        <span class="token string-property property">'name age'</span><span class="token operator">:</span> <span class="token string">'echo 6'</span><span class="token punctuation">&#125;</span></code></pre><p>我们访问obj的name属性可以采用<code>obj.name</code>或者<code>obj[&#39;name&#39;]</code></p><p>如果想要访问obj的’name age’ 中间有空格的呢 那么使用obj.’name age’ 这样直接报错<code>Unexpected string</code></p><p>正确的方式是采用<code>obj[&#39;name age&#39;]</code></p><p>tips: 希望自己的总结对屏幕前的您有帮助，若有不对的地方，积极指出。thanks </p><p>一起进步！！!</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023</title>
      <link href="/2022/12/27/2023/"/>
      <url>/2022/12/27/2023/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="2023"><a href="#2023" class="headerlink" title="2023"></a>2023</h1><p>记录2023，体系化查漏补缺。从HTML、CSS、JS、网络层面、框架、工程化、设计模式等方面总结。</p><h2 id="JS相关"><a href="#JS相关" class="headerlink" title="JS相关"></a>JS相关</h2><h3 id="JS类型检测"><a href="#JS类型检测" class="headerlink" title="JS类型检测"></a>JS类型检测</h3><p><strong>JavaScript类型检测的几种方式</strong></p><ol><li>typeof 操作符：返回一个字符串，表示值的类型，可能的值有 “undefined”、”boolean”、”number”、”string”、”bigint”、”symbol” 和 “object”。使用 typeof 检测基本数据类型比较方便，但是对于复杂数据类型（比如 null 或对象）可能会得到不准确的结果，所以使用时需要谨慎。</li><li>instanceof 操作符：用于检测对象的类型，可以检测对象的原型链中是否存在某个构造函数。使用 instanceof 操作符检测一个对象是否属于某个类时，需要使用该类的构造函数进行检测，对于基本数据类型和 null 无法使用 instanceof 操作符检测。</li><li>Object.prototype.toString() 方法：该方法返回一个表示对象的字符串，格式为 “[object 类型]”，其中类型指的是对象的内部属性 [[Class]] 的值。这种方式可以准确地检测所有类型的值，包括 null 和 undefined。</li><li>Array.isArray() 方法：用于检测一个值是否为数组类型，返回一个布尔值。该方法只能检测数组类型，无法检测其他类型的值。</li></ol><h3 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h3><ol><li>介绍深浅拷贝</li><li>手写深拷贝、浅拷贝</li><li>JSON.parse(JSON.srtingfy())的弊端</li><li>深拷贝如何解决循环引用</li></ol><p>讲深、浅拷贝之前，我们先了解一哈js的基础类型和对象类型。</p><h4 id="JS基础类型、对象类型"><a href="#JS基础类型、对象类型" class="headerlink" title="JS基础类型、对象类型"></a>JS基础类型、对象类型</h4><ul><li>基础类型 -&gt; <code>栈内存</code></li><li>对象类型 -&gt; <code>堆内存</code></li><li>对象类型在栈空间存储的是堆内存的引用地址</li><li>对于赋值： 基础类型会完整复制变量值、引用类型赋值时复制引用地址</li></ul><blockquote><p>介绍深浅拷贝</p></blockquote><p>深拷贝：MDN介绍拷贝的对象和生成的对象的属性不共享相同的引用，简洁的来说：深拷贝拷贝的是值。</p><p>浅拷贝：与深拷贝相反，拷贝的是引用地址。</p><blockquote><p>手写深拷贝、浅拷贝</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//深拷贝</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> copyObj <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//遍历对象自身及原型链上所有可枚举不可枚举属性</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            copyObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> copyObj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//浅拷贝 相对比深拷贝 缺少了递归赋值引用值的步骤</span><span class="token keyword">function</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>     <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> copyObj <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        copyObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> copyObj<span class="token punctuation">&#125;</span></code></pre><blockquote><p> JSON.parse(JSON.srtingfy())的弊端</p></blockquote><ol><li>无法对Date、RegExp、Error对象进行深拷贝</li><li>无法对函数进行深拷贝</li><li>无法解决循环引用</li><li>如果obj里有NaN、Infinity和-Infinity，则序列化的结果会变成null</li></ol><blockquote><p>深拷贝如何解决循环引用</p></blockquote><p>采用循环引用导致栈溢出代码 <code>Uncaught RangeError: Maximum call stack size exceeded</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'echo'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> testObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'sixi'</span><span class="token punctuation">,</span>    <span class="token literal-property property">relative</span><span class="token operator">:</span> obj<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>relative <span class="token operator">=</span> testObj<span class="token punctuation">;</span> <span class="token comment">//循环引用</span><span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>优化手写深拷贝代码：使用WeakMap对已遍历的对象进行保存，当递归调用的时候直接判断WeakMap是否存在，若已存在则直接返回，避免无限循环。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> copyObj <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    hash<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> copyObj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//遍历对象自身及原型链上所有可枚举不可枚举属性</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            copyObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token operator">:</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> copyObj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="关于闭包"><a href="#关于闭包" class="headerlink" title="关于闭包"></a>关于闭包</h3><ol><li>讲讲闭包</li><li>闭包的缺点</li><li>如何解决闭包</li></ol><p>讲闭包之前，我们先了解一哈<code>作用域</code>,<code>作用域链</code>、<code>AO</code>、<code>GO</code>。</p><h4 id="作用域链、AO、GO"><a href="#作用域链、AO、GO" class="headerlink" title="作用域链、AO、GO"></a>作用域链、AO、GO</h4><p>作用域： 指在程序中定义变量的区域（全局作用域、函数作用域、块级作用域）</p><p>AO：函数作用域</p><p>GO：全局作用域</p><p>块级作用域：ES6-&gt;const、let</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'echo'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>JS执行流程： JIT（及时性编译语言），先编译再执行 -&gt; </code></p><ol><li>a被定义时，a的作用域链是GO；a被执行时，a的作用域链是AO-&gt;GO。</li><li>b被定义时，b的作用域链是a的AO-&gt;GO；b被执行时，b的作用域链是b的AO-&gt;a的AO-&gt;GO。</li><li>b被销毁时，销毁b的AO；</li><li>a被销毁时，销毁a的AO；</li></ol><blockquote><p>讲讲闭包</p></blockquote><p>闭包是指引用了另外函数作用域中的变量的函数。通常是指在嵌套函数中实现的。</p><blockquote><p>闭包的优缺点</p></blockquote><ul><li>闭包存在，就会保存保留它们包含的函数作用域，导致内存消耗，v8等优化有垃圾回收机制（GC）。</li><li>闭包的处理速度和内存消耗方面对脚本性能具有负面影响。</li></ul><blockquote><p>如何解决闭包</p></blockquote><ul><li>对于引用的某些库，可以使用自带的实例销毁方法。</li><li>对于某些对象可以使用 <code>global = null；</code> 解除对函数的引用，释放内存。</li></ul><h3 id="垃圾回收（GC机制）"><a href="#垃圾回收（GC机制）" class="headerlink" title="垃圾回收（GC机制）"></a>垃圾回收（GC机制）</h3><h4 id="栈和堆的垃圾回收"><a href="#栈和堆的垃圾回收" class="headerlink" title="栈和堆的垃圾回收"></a>栈和堆的垃圾回收</h4><p>栈的垃圾回收</p><ul><li>一个记录当前执行状态的指针（称为ESP），指向调用栈中的函数执行上下文</li><li>当一个函数执行结束后，JavaScript 引擎会通过向下移动 <code>ESP</code> 来销毁该函数保存在栈中的执行上下文</li></ul><p>堆的垃圾回收</p><ul><li><p>引用计数法 </p></li><li><p>标记清除法 （使用广泛）</p><blockquote><p>标记清除法：标记阶段即为所有活动对象做上标记，清除阶段则把没有标记（也就是非活动对象）销毁</p></blockquote></li><li><p>标记：比如当变量进入执行环境时，反转某一位（通过一个二进制字符来表示标记），又或者可以维护进入环境变量和离开环境变量这样两个列表，可以自由的把变量从一个列表转移到另一个列表<br>需要从出发点去遍历内存中所有的对象去打标记，而这个出发点有很多，我们称之为一组 根 对象，而所谓的根对象，其实在浏览器环境中包括又不止于 全局Window对象、文档DOM树 等</p></li><li><p>垃圾收集器在运行时会给内存中的所有变量都加上一个标记，假设内存中所有对象都是垃圾，全标记为0</p></li><li><p>然后从各个根对象开始遍历，把不是垃圾的节点（能访问到的节点）改成1</p></li><li><p>清理所有标记为0的垃圾，销毁并回收它们所占用的内存空间</p></li><li><p>最后，把所有内存中对象标记修改为0，等待下一轮垃圾回收</p></li></ul><p>标记整理（Mark-Compact）算法对标记清除法的优化</p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>调用函数时，会创建一个执行环境，this就根据函数的执行环境绑定。</p><ol><li>浏览器中默认this指向Window</li><li>普通函数this -&gt; Window对象</li><li>构造函数this -&gt; 构造函数的实例对象</li></ol><h3 id="原型、原型链"><a href="#原型、原型链" class="headerlink" title="原型、原型链"></a>原型、原型链</h3><ul><li>每一个函数都会创建一个<code>prototype</code>属性，该属性是函数的原型对象  <code>Person.prototype = Person.prototype</code></li><li>每一个函数的原型都具有一个<code>constructor</code>属性，该属性指向函数本身 <code>Person.prototype.constructor = Person</code></li><li><code>constructor</code>对象的原型设置为新创建的对象的原型</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d1b83be45d645d88514b89c3876b787~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>原型链继承、借用构造函数（改变this指向）、组合继承（原型链+构造函数）、寄生继承、寄生组合、类<br><code>借鉴红宝书</code></p><p>Java类的访问权限修饰符<br><code>public</code>和<code>private</code>是访问权限修饰符，用于控制外界对类内部成员的访问。</p><h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h4><p>缺点：原型中包含引用值，其引用值会在所有实例中共享 可以类比 public</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Sixi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Echo</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sixi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>instance<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token operator">?.</span>arr<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3]</span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token operator">?.</span>arr<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3]</span></code></pre><h4 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h4><p>缺点：</p><ol><li>必须在构造函数中定义方法，导致函数不能重用。 </li><li>子类不能访问父类原型上定义的方法 可以类比 private<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Sixi</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Sixi</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'echo_sixi'</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token operator">?.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//18</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token operator">?.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//echo_sixi</span></code></pre></li></ol><h4 id="圣杯模式"><a href="#圣杯模式" class="headerlink" title="圣杯模式"></a>圣杯模式</h4><p>代码实现</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Sixi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">inherit</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype  <span class="token operator">=</span> parent<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>    child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructior <span class="token operator">=</span> child<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">inherit</span><span class="token punctuation">(</span>Sixi<span class="token punctuation">,</span> Echo<span class="token punctuation">)</span><span class="token class-name">Echo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'456'</span><span class="token keyword">const</span> echo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> sixi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sixi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sixi<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 456</span></code></pre><h4 id="类（class）"><a href="#类（class）" class="headerlink" title="类（class）"></a>类（class）</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Echo</span><span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Sixi</span> <span class="token keyword">extends</span> <span class="token class-name">Echo</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'echo_sixi'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sixi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//18</span></code></pre><h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><ol><li>讲讲eventLoop</li><li>宏任务</li><li>微任务</li></ol><blockquote><p>关于eventLoop</p></blockquote><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd754eb33121459d9c5e3e43f430ee5c~tplv-k3u1fbpfcp-watermark.image" alt="eventLoop.png"></p><p><code>JS单线程</code><br>JS主线程 -&gt; 执行栈（<code>先进后出</code>）<br>callback queue -&gt; 任务队列（<code>先进先出</code>）</p><h4 id="event-loop执行流程"><a href="#event-loop执行流程" class="headerlink" title="event loop执行流程"></a>event loop执行流程</h4><p>QA:</p><ul><li><input checked="" disabled="" type="checkbox"> eventloop的定义和作用</li><li><input checked="" disabled="" type="checkbox"> eventloop的执行过程</li><li><input disabled="" type="checkbox"> 异步任务的微任务和宏任务</li></ul><blockquote><p>eventloop是一种异步的编程机制，它可以在单线程中实现并发，通过轮询事件队列中的事件来判断是否有新的任务执行，从而实现异步操作。</p></blockquote><p>在执行过程中，事件循环会将所有的异步任务（回调函数、Promise、async&#x2F;await、定时器、事件监听 → 回调函数）放入一个事件队列中，然后在程序的执行期间不断去检查队列中是否有待处理的事件。当事件队列中有事件则取出执行，如果又包含了异步处理，则交给其它线程进行处理然后返回，继续检查队列中的下一个事件。事件循环采用轮询机制，可以保证任务的执行顺序，同时避免程序阻塞执行。</p><p>主线程执行过程中，遇到JavaScript程序执行的到异步操作，主线程将该任务交给系统或者其它线程进行处理，同时继续执行后面的代码。当异步任务操作完成后，系统或者其它线程会通知主线程，将结果放入事件队列中。主线程空闲时，会检查事件队列中是否有待处理的事件，如果有，则立即执行，没有则继续等待。</p><p>JavaScript的异步任务中，可以将异步任务分为：宏任务和微任务</p><p><code>宏任务</code>：指需要在任务队列中排队等待的执行的任务 → 定时器、ajax请求等。</p><p><code>微任务</code>：指当前任务完毕后需要立即执行的任务 → Promise的then、catch、finally；async&#x2F;await等</p><p>事件循环启动时，会执行当前代码所在的宏任务代码块，当宏任务代码块被执行完了，就会立即执行所有可用的微任务，直到微任务队列为空。然后事件循环会继续执行下一个宏任务，重复这个过程。</p><blockquote><p>宏任务</p></blockquote><p>异步 Ajax 请求、<br>setTimeout、setInterval、<br>文件操作<br>MessageChannel<br>其它宏任务</p><blockquote><p>微任务</p></blockquote><p>Promise.then、.catch 和 .finally<br>process.nextTick<br>MutationObserver<br>其它微任务</p><h3 id="关于异步"><a href="#关于异步" class="headerlink" title="关于异步"></a>关于异步</h3><ol><li>ES6之前之后的异步编程</li><li>讲讲Generator函数</li><li>讲讲Promise对象</li><li>async&#x2F;await函数</li></ol><blockquote><p>ES6之前的异步编程方法</p></blockquote><p>ES6之前实现异步编程的方法大概有四种：</p><ul><li>回调函数</li><li>事件监听</li><li>发布订阅</li><li>构造函数实现Promise</li></ul><blockquote><p>ES6之后的异步编程方法</p></blockquote><ul><li>Generator函数</li><li>Promise对象</li><li>async&#x2F;await</li></ul><h3 id="script标签中的属性"><a href="#script标签中的属性" class="headerlink" title="script标签中的属性"></a>script标签中的属性</h3><h4 id="script标签"><a href="#script标签" class="headerlink" title="script标签"></a>script标签</h4><p>默认的script标签执行脚本，会根据顺序来执行，如果遇到js，就会阻塞DOM渲染</p><h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><p>设置了defer的属性，支持异步下载并且不会影响到DOM的渲染，script是顺序执行</p><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><p>async和defer的区别，async不会按照顺序执行，是谁先加载完谁执行</p><h2 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h2><h3 id="浏览器输入URL到页面展示发生了什么"><a href="#浏览器输入URL到页面展示发生了什么" class="headerlink" title="浏览器输入URL到页面展示发生了什么"></a>浏览器输入URL到页面展示发生了什么</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e3b40358e9d4fdea8d2fd6a715cd488~tplv-k3u1fbpfcp-watermark.image" alt="show.webp"></p><ul><li>浏览器进程：用户交互、子进程管理、文件存储</li><li>网络进程：为渲染进程和浏览器进程提供网络下载</li><li>渲染进程：网络下载的HTML、JavaScript、CSS、图片等资源解析为可以显示和交互的页面</li></ul><p>网络进程：</p><ol><li>查找缓存</li><li>DNS解析</li><li>建立TSL连接（请求协议HTTPS）</li><li>建立TCP连接（建立成功后浏览器会将构建请求行、请求头等信息，并把该域名相关的Cookie等数据附加到请求头中，然后项服务器发送构建请求信息）</li><li>重定向（检查状态码，如果是301&#x2F;302，则需要重定向，从Location自动中读取地址）</li><li>响应数据类型处理（Content-Type）</li></ol><p>浏览器进程：</p><ol><li>检查url是否一致，不一致打开新的进程</li><li>解析html构建DOM树</li><li>解析CSS构建CSS树</li><li>将DOM树和CSS树生成布局树（DOM）</li></ol><h3 id="HTTP请求、处理流程"><a href="#HTTP请求、处理流程" class="headerlink" title="HTTP请求、处理流程"></a>HTTP请求、处理流程</h3><h4 id="浏览器端发起HTTP请求流程"><a href="#浏览器端发起HTTP请求流程" class="headerlink" title="浏览器端发起HTTP请求流程"></a>浏览器端发起HTTP请求流程</h4><ol><li><p>构建请求</p></li><li><p>查找缓存<br>   浏览器缓存：保存本地资源副本，供下次请求时（拦截请求）直接使用的技术</p></li><li><p>准备IP地址和端口<br>    HTTP: 应用层协议、 TCP&#x2F;IP传输层协议<br>    IP地址获取：访问域名 -&gt; 域名和IP是映射关系 采用DNS(域名系统) 将域名地址转换为IP地址<br>    端口：URL上面携带的端口号、HTTP默认端口是80</p></li><li><p>等待TCP队列<br>    涉及知识点：<br>     http&#x2F;1.1和http2在Chrome的运行机制<br>     http&#x2F;1.1：1个TCP同时只能处理一个请求，浏览器为每个域名维护6个tcp连接<br>     http2：可以并行请求资源，浏览器只会为每个域名维护1个tcp连接</p></li><li><p>建立TCP连接<br>     三次握手</p></li><li><p>发送HTTP请求<br>     请求行：请求方法、请求URL、HTTP版本协议；请求头；请求体</p></li></ol><h4 id="服务器处理HTTP请求流程"><a href="#服务器处理HTTP请求流程" class="headerlink" title="服务器处理HTTP请求流程"></a>服务器处理HTTP请求流程</h4><ol><li>返回请求<br> 响应行、响应头、响应体</li><li>断开连接<br>    Connection:Keep-Alive</li><li>重定向<br>    响应头中Location字段：重定向地址</li></ol><p>许多网站第二次打开速度快</p><blockquote><p>DNS缓存、页面资源缓存<br>DNS缓存：浏览器本地的IP和域名映射<br>页面资源缓存：响应头Cache-Control:Max-age&#x3D;2000</p></blockquote><h3 id="HTTP版本区别"><a href="#HTTP版本区别" class="headerlink" title="HTTP版本区别"></a>HTTP版本区别</h3><h4 id="http1-1"><a href="#http1-1" class="headerlink" title="http1.1"></a>http1.1</h4><p>http1.1是目前主流的http协议版本</p><ul><li>持久化链接 通过keep-alive来设置</li><li>管道机制，同一个tpc连接客户端可以发多个请求</li><li>支持断点续传，通过请求头的Range</li><li>支持chunked 数据分块，body里面分块 利于大文件传输 Transfer-Encoding: chunked</li></ul><h4 id="http2-0"><a href="#http2-0" class="headerlink" title="http2.0"></a>http2.0</h4><ul><li>二进制分帧</li><li>头部压缩 HPACK算法 哈夫曼编码</li><li>多路复用 解决队头阻塞</li><li>服务器推送</li><li>请求优先级</li></ul><p>tip： <code>队头阻塞</code>: HTTP开启长连接，公用一个TCP连接，当某个请求时间过长，其它请求只能处于阻塞状态<br>解决方案： 1. 并发连接 2.域名分片</p><h3 id="HTTP和HTTPS的区别"><a href="#HTTP和HTTPS的区别" class="headerlink" title="HTTP和HTTPS的区别"></a>HTTP和HTTPS的区别</h3><ol><li>端口号不同，http是80 https是443</li><li>https需要CA证书</li><li>http信息是明文传输的，https是由ssl+http协议构建可进行加密传输、身份认证的网络协议</li></ol><h4 id="渲染流水线"><a href="#渲染流水线" class="headerlink" title="渲染流水线"></a>渲染流水线</h4><p>1.构建DOM树：浏览器无法直接识别HTML语言，讲HTML转为浏览器可以识别的DOM树，document<br>2.样式计算： 同上。document.styleSheets<br>    1.解析为<code>styleSheets</code><br>    2.转换样式表中的属性值 -&gt; 标准化 （color: #ffffff -&gt; color: rgb(255,255,255)）<br>    3.计算每个节点具体样式（CSS继承、层叠）<br>        继承：子节点继承父节点样式<br>        层叠：样式叠加、样式属性相同根据优先级<br>        盒子的最终样式：例如Chrome：F12-&gt;Elements-&gt;Computed<br>3.布局阶段：<br>    1.创建布局树：遍历DOM树的可见节点，例如head标签、display:none、visibility: hidden等就会被排除<br>4.分层：3D、滚动、z-index、fixed等：渲染引擎为特定的节点生成专用图层，生成一颗对应的图层树（LayerTree）<br>    例如Chrome: F12-&gt; … -&gt;More tools -&gt;Layers<br>    1.拥有层叠上下文属性的元素会单独一层<br>    2.需要剪裁的地方也会被创建为图层<br>5.栅格化<br>    合成线程会将图层划分为图块（256<em>256、512</em>512)<br>    合成线程会按照视口附近的图块优先生成位图，实际生成的位图操作实际是由栅格化来执行的<br>    栅格化：将图块转换为位图，使用GPU生成的位图的过程称为快速栅格化、成成的位图保存在GPU内存中、<br>6.合成和显示<br>    所有图块都被光栅化，合成线程-&gt;DrawQuad命令-&gt;浏览器进程（将页面内容绘制到内存中，再显示到页面上）</p><h4 id="重绘、重排、合成"><a href="#重绘、重排、合成" class="headerlink" title="重绘、重排、合成"></a>重绘、重排、合成</h4><p>知识点： <code>重绘</code>、<code>重排</code>、<code>合成</code><br>重绘：比如样式修改：背景色修改 -&gt; 不会影响布局阶段和分层阶段<br>重排：比如样式修改：高度 -&gt; 影响布局  新增BFC -&gt; 影响布局、分层<br>对比：重绘比重排快-&gt;重绘相比重排 没有layout、layer阶段</p><p>合成：浏览器渲染跳过layout、layer阶段的操作<br>举例：transform属性 -&gt; 所以transform来实现动画效果要好一些</p><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><p>浏览器缓存的方式可以减少网络带宽、降低服务器的压力、减少网络延迟、加快页面打开速度<br>常见的缓存有<code>强缓存</code>和<code>协商缓存</code></p><h4 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h4><p>强缓存：第一次读取到服务器数据后，在设置的过期时间内都不会去重复请求，而是从本地缓存去读取。<br>本地缓存有<code>memory cache</code>、<code>disk cache</code><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb1327b93985435484e1b3ca6da9f2ce~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>如上图所示：</p><ul><li>memory cache一般缓存图片、样式、字体，退出进程数据就清除了</li><li>disk cache一般缓存脚本，存储在硬盘上，需要手动清除</li></ul><p>强缓存优先级高于协商缓存，通过设置响应头控制资源强缓存，使用强缓存，不需要请求服务器。</p><p>Cache-Control: max-age&#x3D;3600 相对时间，单位秒<br>Expires: Mon, 14 Mar 2023 08:00:00 GMT 具体的时间，单位秒</p><p>同时使用，Cache-Control的优先级高</p><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><p>协商缓存和强缓存不同就是每次都会跟服务器通信，并带上缓存标识（<code>if-Modified-Since</code> &#x2F; <code>if-None-Match</code>）<br>流程：</p><ol><li>浏览器发送一个请求到服务器，请求包含一个资源的URL和一些缓存相关的头部信息，例如<code>if-None-Match</code> 或者<code>if-Modified-Since</code></li><li>服务器接收到请求后，会检查头部信息，确定浏览器是否有资源的最新版本</li><li>如果是最新版本，返回304状态码和空的响应体，告诉浏览器使用缓存资源</li><li>不是最新版本，返回200状态码和新的响应体，告诉浏览器更新缓存资源</li></ol><blockquote><p>浏览器请求协商缓存命中，则状态码为 <code>304</code></p></blockquote><p>Last-Modified和Etag的区别：</p><ol><li>Last-Modified不能对1s之内的资源变动进行判断</li><li>Etag每一次都是一个新的Hash值</li></ol><h4 id="启发式缓存"><a href="#启发式缓存" class="headerlink" title="启发式缓存"></a>启发式缓存</h4><p>启发式缓存：浏览器自带的缓存策略，每个浏览器变现各不相同。</p><blockquote><p>如果请求头没设置Expires和Cache-control但是响应头返回了Last-Modified信息，这种浏览器会启用自带的缓存策略：<code>(当前时间 - Last-Modified)*0.1</code>;</p></blockquote><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p><a href="https://beta.reactjs.org/">React官方文档</a></p><h4 id="React架构"><a href="#React架构" class="headerlink" title="React架构"></a>React架构</h4><h5 id="React-1"><a href="#React-1" class="headerlink" title="React"></a>React</h5><blockquote><p>知识点<br>主流浏览器刷新频率60Hz，每（1000ms&#x2F;60Hz）<code>16.6ms</code>浏览器刷新一次<br>渲染线程和JS线程是互斥的，JS执行会中断渲染进程<br>在浏览器刷新一次的16.6ms时间中，它需要完成：JS脚本执行-&gt;样式布局-&gt;样式绘制<br>当JS执行时间超过16.6ms那么样式布局和样式绘制的处理就没有在此次刷新中执行</p></blockquote><p>react15：栈实现、同步更新、协调器同步、递归执行<br>Stack reconciler（协调器）：执行函数组件、class组件将JSX转为DOM树（diff算法、挂载、卸载、更新）<br>Renderer（渲染器）：负责将变化组件渲染到页面上</p><p>react16: Fibe、扁平化的单链表的数据结构r、可中断的异步更新、循环迭代<br>Scheduler（调度器）、Reconciler（协调器）、Renderer（渲染器）</p><p>调度器：浏览器是否有剩余时间，浏览器API（requestIdleCallback）<br>let yieldInterval &#x3D; 5; 源码为5毫秒</p><p>双缓冲技术：类似计算机图形学 中的 双缓冲策略<br>画图呈现到屏幕的过程 -&gt; 创建位图对象，操作位图对象，最后再呈现位图对象</p><ul><li>WIP树（workInProgress tree）</li><li>WIP节点不是全部新的。如果某颗子树不需要变动，直接复用</li><li>异常处理，有异常继续使用旧树</li><li>WIP从旧树fork出来，第二阶段commit</li></ul><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p><a href="https://cn.vuejs.org/">Vue官方文档</a></p><h4 id="Vue2和Vue3实现双向绑定的原理"><a href="#Vue2和Vue3实现双向绑定的原理" class="headerlink" title="Vue2和Vue3实现双向绑定的原理"></a>Vue2和Vue3实现双向绑定的原理</h4><p>Vue2使用Object.definePropty、Vue3使用Proxy</p><h4 id="Vue的Api风格"><a href="#Vue的Api风格" class="headerlink" title="Vue的Api风格"></a>Vue的Api风格</h4><p>Options API和Composition API。</p><ul><li>选项式API是在组合式API基础上实现的。Options API以组件实例的概念为中心。</li><li>Composition API 常配合 <code>&lt;script setup&gt;</code>,使用组合函数可以很好的组织和重用逻辑。</li></ul><p>Composition API 可以重用逻辑，Vue2就不可以重用逻辑吗？</p><p>Vue2逻辑复用机制是mixins（接收一个数组），用于扩充父组件的对象和方法。</p><p>mixins的缺点：覆盖性会导致不稳定性，操作不当会造成全局污染</p><h4 id="Vue的computed和watch"><a href="#Vue的computed和watch" class="headerlink" title="Vue的computed和watch"></a>Vue的computed和watch</h4><ul><li>computed 只有在依赖的响应式数据发生变化时才会重新计算，而 watch 则是在被监听的响应式数据发生变化时立即执行回调函数。</li><li>computed 一般用于计算和处理数据，而 watch 一般用于监听数据的变化并执行一些副作用，如异步操作、界面更新等。</li></ul><h2 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h2><h3 id="babel相关"><a href="#babel相关" class="headerlink" title="babel相关"></a>babel相关</h3><h4 id="babel的编译流程"><a href="#babel的编译流程" class="headerlink" title="babel的编译流程"></a>babel的编译流程</h4><p>babel的编译流程可以分别：解析、转换、生成</p><ul><li>解析：使用@babel&#x2F;parser，词法分析和语法分析，词法分析为标记化转为tokenization，语法分析为转换为AST树</li><li>转换：使用@babel&#x2F;traverse, AST进行深度遍历并进行各种增删改</li><li>生成：使用@babel&#x2F;generator, AST -&gt; code</li></ul><h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><p>Babel默认只是转换箭头函数，而let Promise、includes这些没有转换</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//转换前：</span><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//转转换后：</span><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>Babel把JavaScript语法分为<code>语法</code>和<code>api</code>,语法在JavaScript中运行时是无法重写的。而api就可以支持方法重写</p></blockquote><p>Babel只对语法进行处理，对于api就使用polyfill模块进行处理的，由于polyfill体积太大，使用babel7提供的useBuiltIns:(false, entry, usage: 按需添加)<br>@babel&#x2F;runtime, @babel&#x2F;plugin-transform-runtime 把 helpers 和 polyfill 功能拆分了。默认只提供 helpers</p><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><h4 id="webpack自动编译的三种方式"><a href="#webpack自动编译的三种方式" class="headerlink" title="webpack自动编译的三种方式"></a>webpack自动编译的三种方式</h4><ol><li>watch mode 观察模式</li><li>webpack-dev-server web服务器</li><li>webpack-dev-middleware webpack中间件 + express</li></ol><h4 id="webpack的热更新"><a href="#webpack的热更新" class="headerlink" title="webpack的热更新"></a>webpack的热更新</h4><p><strong>什么是runtime？</strong><br>runtime 包含：在模块交互时，连接模块所需的加载和解析逻辑。包括浏览器中的已加载模块的连接，以及懒加载模块的执行逻辑</p><p><strong>什么是manifest？</strong><br>当 <code>compiler</code> 开始执行、解析和映射应用程序时，它会保留所有模块的详细要点。这个数据集合称为 “<code>manifest</code>“<br>当完成打包并发送到浏览器时，会在运行时（Runtime）通过 Manifest 来解析和加载模块。<br>无论你选择哪种模块语法，那些import或require语句现在都已经转换为__webpack_require__方法，此方法指向模块标识符<br><strong>通过使用 <code>manifest</code> 中的数据，<code>runtime</code> 将能够查询模块标识符，检索出背后对应的模块。</strong></p><p>总结： </p><ol><li>webpack-dev-server会创建两个服务-&gt;express的http服务和web socket服务 （sockjs建立webSocket长连接）</li><li>webpack监听到文件或模块变化时会重新编译打包，生成的hash值</li><li>通过HMR runtime中的check方法拿到hash值向server端发送ajax请求和jsonp请求，服务器端会返回一个json文件(manifest)和js文件(update chunk)<br> ajax请求json文件  jsonp请求js模块文件</li><li>通过返回的json文件包含的hash值来获取最新模块代码，再利用runtime机制进行热更新</li></ol><p>如果未配置热更新会在第二步后走以下操作<br>通过webSocket发送的type为ok时，直接执行reload操作，刷新浏览器</p><p>webpack的热更新的原文链接： <a href="https://zhuanlan.zhihu.com/p/30669007">https://zhuanlan.zhihu.com/p/30669007</a></p><h3 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h3><p><a href="https://cn.vitejs.dev/">https://cn.vitejs.dev/</a><br>使用原生ESM文件，无需打包<br>超快的热重载</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/424842555">https://zhuanlan.zhihu.com/p/424842555</a></p><h4 id="webpack优化方案"><a href="#webpack优化方案" class="headerlink" title="webpack优化方案"></a>webpack优化方案</h4><ol><li><code>SplitChunksPlugin</code>代码块分割</li><li>模块懒加载<code>import()</code> -&gt; 比如router文件<br> why：如果模块不懒加载，最终代码会被打包到一个js文件中。</li><li>使用import() 时，使用<code>/* webpackPrefetch: ture*/</code></li><li><code>css-minimizer-webpack-plugin</code> ：使用<a href="https://www.cssnano.cn/">cssnano</a> 优化压缩CSS</li><li><code>terser-webpack-plugin</code>：压缩JS，webpack5默认自带，自定义配置需安装</li><li><code>devServer.compress: true</code> <a href="https://betterexplained.com/articles/how-to-optimize-your-site-with-gzip-compression/">gzip compression</a></li></ol><h3 id="CI-x2F-CD"><a href="#CI-x2F-CD" class="headerlink" title="CI&#x2F;CD"></a><strong>CI&#x2F;CD</strong></h3><p>持续集成（Continuous Integration，CI）和 持续交付（Continuous Delivery，CD），是软件生产领域提升迭代效率的一种工作方式：开发人员提交代码后由 CI&#x2F;CD 系统自动化地执行合并、构建、测试和部署等一系列管道化（Pipeline）的流程，从而尽早发现和反馈代码问题，以小步快跑的方式加速软件的版本迭代过程。</p><h2 id="Hybrid-App"><a href="#Hybrid-App" class="headerlink" title="Hybrid App"></a>Hybrid App</h2><p>目前项目中使用的是基于<a href="https://github.com/marcuswestin/WebViewJavascriptBridge">WebViewJavaScriptBridge</a></p><h3 id="Hybrid-App的优缺点"><a href="#Hybrid-App的优缺点" class="headerlink" title="Hybrid App的优缺点"></a>Hybrid App的优缺点</h3><p><strong>优点：</strong></p><ol><li>不受限应用商店审核，直接部署到线上环境。</li><li>页面有变动，不需要重新下载APP</li><li>部分页面由H5做，减少APP打包体积</li></ol><p><strong>缺点：</strong></p><ol><li>每次需求需花时间理清哪部分为APP页面，哪部分为H5页面</li><li>H5在移动端上很多IOS和Android的UI兼容性问题</li></ol><h3 id="JSBrige"><a href="#JSBrige" class="headerlink" title="JSBrige"></a>JSBrige</h3><p>H5 -&gt; IOS： 请求拦截 <strong>URL scheme</strong></p><p>在H5中发起请求方式一般有location.href和iframe，使用iframe方式</p><blockquote><p>连续多次修改window.location.href的值，Native层只能接受到最后一次请求。</p></blockquote><pre class="language-none"><code class="language-none">var WVJBIframe &#x3D; document.createElement(&#39;iframe&#39;);WVJBIframe.style.display &#x3D; &#39;none&#39;;WVJBIframe.src &#x3D; &#39;wvjbscheme:&#x2F;&#x2F;__BRIDGE_LOADED__&#39;;document.documentElement.appendChild(WVJBIframe);setTimeout(function () &#123;    document.documentElement.removeChild(WVJBIframe);&#125;, 0);</code></pre><p>IOS端拦截请求，解析、执行原生方法</p><p>客户端和H5通信： <strong>window注入</strong></p><p>H5需要先注册监听事件，原生在某个时刻调用js的window.WebViewJavascriptBridge对象里方法。</p><h3 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h3><p>响应式网页设计是让WEB页面适应不同屏幕的宽度。</p><p>媒介查询 → <code>@media screen</code></p><p>灵活网格 → 百分比(%)</p><p>现代布局技术 → 多栏布局（<code>column-count</code>）、<code>flex</code>、 <code>grid</code></p><p>响应式排版 → rem、vh、vw</p><p>视口元标签 → <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</code></p><p>rem实现</p><ul><li>插件 <strong>postcss-pxtorem</strong> + <strong><strong>amfe-flexible</strong></strong></li><li>手动修改</li></ul><pre class="language-jsx" data-language="jsx"><code class="language-jsx">function convert() &#123;  const documentElement &#x3D; document.documentElement;  &#x2F;&#x2F; 设计图默认字体16, 屏宽375. 开发时按设计图大小编码即可.  documentElement.style.fontSize &#x3D;    (16 * documentElement.clientWidth) &#x2F; 375 + &#39;px&#39;;&#125;export function pxToRem(px: number) &#123;  return px &#x2F; 16 + &#39;rem&#39;;&#125;export default function() &#123;  window.addEventListener(&#39;resize&#39;, convert, false);  convert();&#125;</code></pre><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>JavaScript中的单例模式：单例模式核心 -&gt; 确保只有一个实例，提供全局访问</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>观察者模式：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖它的对象都得到通知。<br>在js开发中，我们一般用<code>事件模型</code>来代替传统的发布-订阅模式</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> react </tag>
            
            <tag> 网络 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深浅拷贝方法总结</title>
      <link href="/2022/11/06/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2022/11/06/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="深拷贝与浅拷贝简介："><a href="#深拷贝与浅拷贝简介：" class="headerlink" title="深拷贝与浅拷贝简介："></a>深拷贝与浅拷贝简介：</h2><blockquote><p>深拷贝: 深拷贝是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象。</p></blockquote><blockquote><p>浅拷贝: 浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。</p></blockquote><h3 id="浅拷贝常见方法"><a href="#浅拷贝常见方法" class="headerlink" title="浅拷贝常见方法"></a>浅拷贝常见方法</h3><p>浅拷贝常见方法： 数组的slice()、concat()、Array.from()、Object.assign()、…(拓展运算符)、递归方式实现</p><h4 id="方法一：slice"><a href="#方法一：slice" class="headerlink" title="方法一：slice()"></a>方法一：slice()</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript">   <span class="token keyword">let</span> testArr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'echo'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> shallowClone1 <span class="token operator">=</span> testArr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shallowClone1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>shallowClone1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'boy'</span><span class="token punctuation">;</span>shallowClone1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">111</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shallowClone1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[ 666, 2, &#123; name: 'boy' &#125;, [111, 22] ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testArr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[ 1, 2, &#123; name: 'boy' &#125;, [111, 22] ]</span><span class="token comment">// 通过结果看出若数组一层的基础数据类型进行浅拷贝，是直接独立出来的空间。引用数据类型则不是。</span></code></pre><h4 id="方法二：-concat"><a href="#方法二：-concat" class="headerlink" title="方法二： concat()"></a>方法二： concat()</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> testArr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> shallowClone2 <span class="token operator">=</span> testArr2<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>shallowClone2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testArr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shallowClone2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [11, 2, 3]</span></code></pre><h4 id="方法三：-Array-from"><a href="#方法三：-Array-from" class="headerlink" title="方法三： Array.from()"></a>方法三： Array.from()</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> testArr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> shallowClone6 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>testArr3<span class="token punctuation">,</span> <span class="token parameter">item</span>  <span class="token operator">=></span> item<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这里是array.from的结果'</span><span class="token punctuation">)</span> <span class="token comment">//Array.from() 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shallowClone6<span class="token punctuation">)</span> <span class="token comment">//[2, 4, 6]</span></code></pre><h4 id="方式四-Object-assign"><a href="#方式四-Object-assign" class="headerlink" title="方式四 Object.assign()"></a>方式四 Object.assign()</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//项目中常用</span><span class="token keyword">let</span> testObj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'echo'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> shallowClone3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> testObj1<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testObj1<span class="token punctuation">)</span> <span class="token comment">// &#123;name: "echo", age: 6, c: &#123; sex: 1 &#125;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shallowClone3<span class="token punctuation">)</span> <span class="token comment">// &#123;name: "echo", age: 9, c: &#123; sex: 1 &#125;&#125;</span><span class="token comment">//对对象的引用</span>shallowClone3<span class="token punctuation">.</span>c<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token number">0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testObj1<span class="token punctuation">)</span> <span class="token comment">// &#123;name: "echo", age: 6, c: &#123; sex: 0 &#125;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shallowClone3<span class="token punctuation">)</span> <span class="token comment">// &#123;name: "echo", age: 6, c: &#123; sex: 0 &#125;&#125;</span><span class="token comment">//从结果中可以看出 浅拷贝的方式对引用类型进行修改会影响源数据</span></code></pre><h4 id="方式五-…-拓展运算符"><a href="#方式五-…-拓展运算符" class="headerlink" title="方式五 … (拓展运算符)"></a>方式五 … (拓展运算符)</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> testObj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'echo2'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">like</span><span class="token operator">:</span> <span class="token string">'code'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> shallowClone4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>testObj2<span class="token punctuation">&#125;</span>shallowClone4<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testObj2<span class="token punctuation">)</span> <span class="token comment">//&#123;name: "echo2", age: 6&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shallowClone4<span class="token punctuation">)</span> <span class="token comment">//&#123;name: "echo2", age: 9&#125;</span><span class="token comment">//对象的引用</span>shallowClone4<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>like <span class="token operator">=</span> <span class="token string">'JavaScript'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testObj2<span class="token punctuation">)</span> <span class="token comment">// &#123;name: "echo2", age: 6, obj: &#123; like: 'JavaScript'&#125;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shallowClone4<span class="token punctuation">)</span> <span class="token comment">// &#123;name: "echo2", age: 6, obj: &#123; like: 'JavaScript'&#125;&#125;</span></code></pre><h4 id="方式六：递归实现"><a href="#方式六：递归实现" class="headerlink" title="方式六：递归实现"></a>方式六：递归实现</h4> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> cloneTarget <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cloneTarget<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cloneTarget<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="深拷贝常见实现方式"><a href="#深拷贝常见实现方式" class="headerlink" title="深拷贝常见实现方式"></a>深拷贝常见实现方式</h3><blockquote><p>为解决 浅拷贝对引用数据类型操作改变了源数据，采用深拷贝来解决问题</p></blockquote><h4 id="方式一：-JSON-parse-JSON-srtingfy"><a href="#方式一：-JSON-parse-JSON-srtingfy" class="headerlink" title="方式一： JSON.parse(JSON.srtingfy())"></a>方式一： JSON.parse(JSON.srtingfy())</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 通过JSON.srtingfy()将数据转为json格式，通过JSON.parse()解析josn数据</span><span class="token comment">// 弊端： </span>    <span class="token comment">// 1. 无法对Date、RegExp、Error对象进行深拷贝</span>    <span class="token comment">// 2. 无法对函数</span>    <span class="token comment">// 3. 无法解决循环引用</span>    <span class="token comment">// 4. 如果obj里有NaN、Infinity和-Infinity，则序列化的结果会变成null</span><span class="token keyword">let</span> testObj3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'lufei'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">like</span><span class="token operator">:</span> <span class="token string">'code'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> deepClone1 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>testObj3<span class="token punctuation">)</span><span class="token punctuation">)</span>deepClone1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>like <span class="token operator">=</span> <span class="token string">'girl'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testObj3<span class="token punctuation">)</span> <span class="token comment">// &#123;name: "lufei", age: 6, obj: &#123; like: 'code'&#125;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deepClone1<span class="token punctuation">)</span> <span class="token comment">// &#123;name: "lufei", age: 6, obj: &#123; like: 'girl'&#125;&#125;</span></code></pre><h4 id="方式二：-递归实现"><a href="#方式二：-递归实现" class="headerlink" title="方式二： 递归实现"></a>方式二： 递归实现</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> objTwo <span class="token operator">=</span>  Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            objTwo<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> objTwo<span class="token punctuation">&#125;</span><span class="token keyword">let</span> ooo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">222</span><span class="token punctuation">,</span> <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">haha</span><span class="token operator">:</span> <span class="token string">'哈哈'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">deepClone</span><span class="token punctuation">(</span>ooo<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'原始值和引用值 Array.from'</span><span class="token punctuation">)</span><span class="token comment">//类数组</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token number">0</span><span class="token operator">:</span><span class="token string">'1'</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token operator">:</span><span class="token string">'2'</span><span class="token punctuation">,</span>    <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> objArr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">'No.'</span> <span class="token operator">+</span> item<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objArr<span class="token punctuation">)</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token operator">===</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'echo'</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> oi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oi<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS技巧：循环、遍历、迭代</title>
      <link href="/2021/07/27/JS%E6%8A%80%E5%B7%A7%EF%BC%9A%E5%BE%AA%E7%8E%AF%E3%80%81%E9%81%8D%E5%8E%86%E3%80%81%E8%BF%AD%E4%BB%A3/"/>
      <url>/2021/07/27/JS%E6%8A%80%E5%B7%A7%EF%BC%9A%E5%BE%AA%E7%8E%AF%E3%80%81%E9%81%8D%E5%8E%86%E3%80%81%E8%BF%AD%E4%BB%A3/</url>
      
        <content type="html"><![CDATA[<p>大家好, 我是echo. 一名刚毕业的应届生.最近再学习Vue源码和看小黄书上卷.从平时摸鱼中学习一些js技巧和一些问题的解决方案.<br>在这里,分享自己的一些的解决方案和一些数组循环、遍历和迭代的知识分享.有不对的地方和有更好的解决方案,请大佬积极指出.</p><p>本文主要以实例引入, “纸上得来终觉浅，绝知此事要躬行”。更好的记忆莫过于coding.</p><h4 id="1-输入任意两个数值数组求交集"><a href="#1-输入任意两个数值数组求交集" class="headerlink" title="1. 输入任意两个数值数组求交集"></a>1. 输入任意两个数值数组求交集</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">const</span> brr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></code></pre><h5 id="1-1-方法一-核心filter方法"><a href="#1-1-方法一-核心filter方法" class="headerlink" title="1.1 方法一 核心filter方法"></a>1.1 方法一 核心filter方法</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">?.</span>length <span class="token operator">></span> b<span class="token operator">?.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">changeArr</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">changeArr</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">changeArr</span><span class="token punctuation">(</span><span class="token parameter">arrMax<span class="token punctuation">,</span> arrMin</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> arrMin<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>arrMax<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="1-2-方法二-核心find方法"><a href="#1-2-方法二-核心find方法" class="headerlink" title="1.2 方法二 核心find方法"></a>1.2 方法二 核心find方法</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> brr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> midArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>brr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">val</span> <span class="token operator">=></span> val <span class="token operator">===</span> value <span class="token operator">&amp;&amp;</span> midArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>midArr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> brr<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-求数值数组的最大数值"><a href="#2-求数值数组的最大数值" class="headerlink" title="2.求数值数组的最大数值"></a>2.求数值数组的最大数值</h4><h5 id="2-1-方式一-核心sort方法"><a href="#2-1-方式一-核心sort方法" class="headerlink" title="2.1 方式一 核心sort方法"></a>2.1 方式一 核心sort方法</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'echo0'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'echo1'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'echo2'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">findMaxArrNum</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> b<span class="token punctuation">.</span>age<span class="token operator">-</span>a<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//求最小值b-a 改为a-b</span><span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">findMaxArrNum</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2-2-方式二-核心Math内置对象方法"><a href="#2-2-方式二-核心Math内置对象方法" class="headerlink" title="2.2 方式二 核心Math内置对象方法"></a>2.2 方式二 核心Math内置对象方法</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> maxNum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> minNum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>maxNum<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>minNum<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2-3-方式三"><a href="#2-3-方式三" class="headerlink" title="2.3 方式三"></a>2.3 方式三</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">针对简单数值的数组使用sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">、reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">、slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>进行组合获取<span class="token punctuation">;</span></code></pre><h4 id="3-判断是否是在浏览器环境下"><a href="#3-判断是否是在浏览器环境下" class="headerlink" title="3.判断是否是在浏览器环境下"></a>3.判断是否是在浏览器环境下</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-判断是否是一般的object对象"><a href="#4-判断是否是一般的object对象" class="headerlink" title="4.判断是否是一般的object对象"></a>4.判断是否是一般的object对象</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'echo'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"[object Object]"</span><span class="token punctuation">;</span></code></pre><h4 id="5-数组剔除空元素"><a href="#5-数组剔除空元素" class="headerlink" title="5.数组剔除空元素"></a>5.数组剔除空元素</h4><p>需求: 针对数组中获取到的数据，剔除掉null、undefined、“”</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> uuArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>uuArr<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> item<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[undefined, undefined, undefined, undefined, undefined, 8]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uuArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, null, 2, undefined, "", 8]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uuArr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 8]</span></code></pre><h4 id="6-数组遍历"><a href="#6-数组遍历" class="headerlink" title="6. 数组遍历"></a>6. 数组遍历</h4><h5 id="6-1-filter-、find"><a href="#6-1-filter-、find" class="headerlink" title="6.1 filter()、find()"></a>6.1 filter()、find()</h5><p>对于我们想对数组内的每一个元素进行操作判断则可以使用forEach()<br>常见处理数组都类似如下数组</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> uArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'echo0'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'echo1'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">66</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'echo2'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">666</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span>uArr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>age <span class="token operator">></span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回满足条件的所有元素</span>uArr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>age <span class="token operator">></span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回满足条件的第一个元素 找到然后就return item</span></code></pre><h5 id="6-2-some-、every"><a href="#6-2-some-、every" class="headerlink" title="6.2 some()、every()"></a>6.2 some()、every()</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript">uArr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>age <span class="token operator">></span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//查找到任一元素满足即return item ps: 返回的是布尔值</span>uArr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>age <span class="token operator">></span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数组中任意元素不满足条件则返回false 都满足返回true ps：返回的是布尔值</span></code></pre><h5 id="6-3-for-in、-for-of"><a href="#6-3-for-in、-for-of" class="headerlink" title="6.3 for in、 for of"></a>6.3 for in、 for of</h5><h5 id="6-3-1-for…in"><a href="#6-3-1-for…in" class="headerlink" title="6.3.1 for…in"></a>6.3.1 for…in</h5><blockquote><p>for…in语句以任意顺序遍历一个对象的除Symbol以外的可枚举属性。</p></blockquote><p>例如:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span> <span class="token keyword">in</span> myObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> myObject<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> myObject<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a 2 (for in 遍历得是可枚举的)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> firstMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'echo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> firstSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> firstSet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//key in firstMap</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对于Map和Set for in是不行的 MDN文档介绍 可以使用for of 进行迭代</span></code></pre><h5 id="6-3-2-for…of"><a href="#6-3-2-for…of" class="headerlink" title="6.3.2 for…of"></a>6.3.2 for…of</h5><blockquote><p>for…of语句在可迭代对象（包括 Array，Map，Set，String，TypedArray，arguments 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句</p></blockquote><p>可迭代对象的原型对象上都有一个Symbol.iterator 方法</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> myObject<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//TypeError: myObject is not iterable</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="6-3-3-小结"><a href="#6-3-3-小结" class="headerlink" title="6.3.3 小结"></a>6.3.3 小结</h5><ol><li>for…in遍历对象…(<code>可枚举</code>)属性 (obj 遍历的是 key, array 遍历的是 下标)</li><li>for…in遍历顺序是<code>无序</code>的尽量使用于对象(类数组将无序转为有序)</li><li>for…of遍历的<code>可迭代</code>对象 (Object类型不行 遍历的是value)</li></ol><h4 id="7-生成器"><a href="#7-生成器" class="headerlink" title="7 生成器"></a>7 生成器</h4><h5 id="7-1-生成器函数"><a href="#7-1-生成器函数" class="headerlink" title="7.1 生成器函数"></a>7.1 生成器函数</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> iteratorObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">makeRangeIterator</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">yield</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">makeRangeIterator</span><span class="token punctuation">(</span>iteratorObj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//makeRangeIterator &#123;&lt;suspended>&#125; 返回的是一个Generator迭代器</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//console.log(a.next())</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#123;value: 2, done: false&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#123;value: undefined, done: true&#125;</span></code></pre><h5 id="7-2-实现iterator"><a href="#7-2-实现iterator" class="headerlink" title="7.2 实现iterator"></a>7.2 实现iterator</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> index <span class="token operator">>=</span> arr<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">value</span><span class="token operator">:</span> arr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> ioio <span class="token operator">=</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ioio<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#123;value: 1, done: false&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ioio<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#123;value: 2, done: false&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ioio<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#123;value: 3, done: false&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ioio<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#123;value: undefined, done: true&#125;</span></code></pre><h4 id="8-数组求和"><a href="#8-数组求和" class="headerlink" title="8. 数组求和"></a>8. 数组求和</h4><p>const prr &#x3D; [1, 2, 3, 4, 5, 6];</p><h5 id="8-1-reduce"><a href="#8-1-reduce" class="headerlink" title="8.1 reduce()"></a>8.1 reduce()</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript">prr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=></span>  accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">)</span> <span class="token comment">// 21</span></code></pre><h5 id="8-2-forEach"><a href="#8-2-forEach" class="headerlink" title="8.2 forEach()"></a>8.2 forEach()</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span>prr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>total <span class="token operator">+=</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="9-扁平化数组"><a href="#9-扁平化数组" class="headerlink" title="9.扁平化数组"></a>9.扁平化数组</h4><p>let flattened &#x3D; [[0, 1], [2, 3], [5, 6]];</p><h5 id="9-1-flat"><a href="#9-1-flat" class="headerlink" title="9.1 flat()"></a>9.1 flat()</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript">flattened<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[0, 1, 2, 3, 5, 6]</span></code></pre><h6 id="9-1-1-flat-实现-单层"><a href="#9-1-1-flat-实现-单层" class="headerlink" title="9.1.1 flat()实现 单层"></a>9.1.1 flat()实现 单层</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myFlat</span><span class="token punctuation">(</span><span class="token parameter">brr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> unfoldArr <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span> item <span class="token keyword">of</span> brr <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">?</span>  unfoldArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>item<span class="token punctuation">)</span> <span class="token operator">:</span> unfoldArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> unfoldArr<span class="token punctuation">&#125;</span></code></pre><h6 id="9-1-2-flat-实现-递归实现多层"><a href="#9-1-2-flat-实现-递归实现多层" class="headerlink" title="9.1.2 flat()实现 递归实现多层"></a>9.1.2 flat()实现 递归实现多层</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myFlatMore</span><span class="token punctuation">(</span><span class="token parameter">brr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> unfoldArr <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span> item <span class="token keyword">of</span> brr <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> unfoldArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token function">myFlatMore</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> unfoldArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> unfoldArr<span class="token punctuation">&#125;</span></code></pre><h5 id="9-2-reduce"><a href="#9-2-reduce" class="headerlink" title="9.2 reduce()"></a>9.2 reduce()</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript">flattened<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> accumulator<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="10-…代替文字"><a href="#10-…代替文字" class="headerlink" title="10 …代替文字"></a>10 …代替文字</h4><h5 id="10-1-css样式"><a href="#10-1-css样式" class="headerlink" title="10.1 css样式"></a>10.1 css样式</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">width</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span><span class="token literal-property property">overflow</span><span class="token operator">:</span> hidden<span class="token punctuation">;</span>text<span class="token operator">-</span>overflow<span class="token operator">:</span> ellipsis<span class="token punctuation">;</span>white<span class="token operator">-</span>space<span class="token operator">:</span> nowrap<span class="token punctuation">;</span></code></pre><h5 id="10-2-文字切割加拼接"><a href="#10-2-文字切割加拼接" class="headerlink" title="10.2 文字切割加拼接"></a>10.2 文字切割加拼接</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">textFormat</span><span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'...'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">textFormat</span><span class="token punctuation">(</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>写在最后:</p><p>平平凑凑凑够10条,希望对你有所帮助,巩固js基础.如果更好的方法,建议评论分享.一起进步,成为一名优秀的前端工程师。</p><p>往期js文章</p><p><a href="https://juejin.cn/post/6968686272877428744">深浅拷贝方法总结、练习</a> </p><p><a href="https://juejin.cn/post/6969800612519084063">几分钟了解js的模块化、IFEE</a></p><p><a href="https://juejin.cn/post/6979812535557963784">JavaScript实现封装、继承、多态</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
